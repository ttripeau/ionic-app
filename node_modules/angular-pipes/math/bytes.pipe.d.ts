import { PipeTransform } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare type ByteUnit = 'B' | 'kB' | 'KB' | 'MB' | 'GB' | 'TB';
export declare class BytesPipe implements PipeTransform {
    static formats: {
        [key: string]: {
            max: number;
            prev?: ByteUnit;
        };
    };
    transform(input: any, decimal?: number, from?: ByteUnit, to?: ByteUnit): any;
    static formatResult(result: number, unit: string): string;
    static calculateResult(format: {
        max: number;
        prev?: ByteUnit;
    }, bytes: number): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<BytesPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDeclaration<BytesPipe, "bytes", false>;
}
export declare class NgBytesPipeModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NgBytesPipeModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<NgBytesPipeModule, [typeof BytesPipe], never, [typeof BytesPipe]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<NgBytesPipeModule>;
}

//# sourceMappingURL=bytes.pipe.d.ts.map