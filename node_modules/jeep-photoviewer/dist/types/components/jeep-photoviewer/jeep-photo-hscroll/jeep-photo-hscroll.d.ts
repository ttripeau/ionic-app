import { EventEmitter } from '../../../stencil-public-runtime';
import { Image, ViewerOptions, JeepPhotoViewerResult } from '../../../interfaces/interfaces';
export declare class JeepPhotoHscroll {
  el: HTMLJeepPhotoHscrollElement;
  /**
   * The selected position
   */
  position: number;
  /**
   * The Image List
   */
  imageList: Image[];
  /**
   * The photoviewer options
   */
  options: ViewerOptions;
  /**
   * The photoviewer mode ('gallery':'one':'slider')
   */
  mode: string;
  innerImageList: Image[];
  innerOptions: ViewerOptions;
  innerPosition: number;
  innerMode: string;
  buttonsVisibility: boolean;
  isFullscreen: boolean;
  photoZoom: boolean;
  share: string;
  shareShow: boolean;
  titleShow: boolean;
  maxZoomScale: number;
  currentIndex: number;
  parsePosition(newValue: number): void;
  parseImageList(newValue: Image[]): void;
  parseOptions(newValue: ViewerOptions): void;
  parseMode(newValue: string): void;
  /**
   * Emitted when successful or when an error occurs or a message has to be sent
   */
  onPhotoHscrollResult: EventEmitter<JeepPhotoViewerResult>;
  /**
   * Emitted when the zoom is active or not
   */
  onPhotoZoom: EventEmitter<{
    isZoom: boolean;
  }>;
  /**
   * Emitted when swipe gestures in Gallery mode
   */
  onPhotoPhotoHscrollClose: EventEmitter<void>;
  handleWindowResize(): Promise<void>;
  handleJeepPhotoButtonsClose(): Promise<void>;
  handleJeepPhotoButtonsShare(): Promise<void>;
  handleJeepPhotoShareCompleted(event: CustomEvent): Promise<void>;
  handleJeepPhotoFullscreenRequest(): Promise<void>;
  handleJeepPhotoMinimizeRequest(): Promise<void>;
  handleJeepPhotoZoomOneTap(): Promise<void>;
  handleJeepPhotoSwipe(event: CustomEvent): Promise<void>;
  /**
   * Method initialize
   */
  init(): Promise<void>;
  /**
   * Set the Carousel.
   */
  setCarousel(): Promise<void>;
  _element: any;
  _window: Window | any;
  _carouselEl: HTMLDivElement;
  _tapped: boolean;
  _tappedTime: any;
  _tapNum: number;
  _timerStart: boolean;
  _currentPosition: number;
  _photoZoomOneTap: boolean;
  _widthFullscreen: number;
  _previousScrollWidth: number;
  _ticking: boolean;
  _isScrollListener: boolean;
  _shareUrl: string;
  _shareTitle: string;
  _shareText: string;
  componentWillLoad(): Promise<void>;
  componentDidLoad(): Promise<void>;
  componentDidRender(): Promise<void>;
  private _init;
  private _setCarousel;
  private _scrollToPosition;
  private _getCurrentPhotoIndex;
  private _fullscreenRequest;
  private _fullscreenExit;
  private _handleClick;
  render(): any;
}
