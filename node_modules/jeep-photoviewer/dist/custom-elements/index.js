import { HTMLElement, createEvent, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

const btoa = (b) => window.btoa(b);
const shareSVG = "<svg xmlns='http://www.w3.org/2000/svg'  viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-share-2'><circle cx='18' cy='5' r='3'></circle><circle cx='6' cy='12' r='3'></circle><circle cx='18' cy='19' r='3'></circle><line x1='8.59' y1='13.51' x2='15.42' y2='17.49'></line><line x1='15.41' y1='6.51' x2='8.59' y2='10.49'></line></svg>";
const closeSVG = "<svg xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-x'><line x1='18' y1='6' x2='6' y2='18'></line><line x1='6' y1='6' x2='18' y2='18'></line></svg>";
const minimizeSVG = "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-minimize'><path d='M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3'></path></svg>";
const fullscreenSVG = "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-maximize'><path d='M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3'></path></svg>";
const placeholderSVG = `<svg id='No_Image' data-name='No_Image' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 240 240'>
<rect x='50' y='70' width='140' height='140' rx='20' ry='20' fill='#3700B3' mask='url(#hole)'/>
<mask id='hole'>
    <rect x='50' y='70' width='140' height='140'  rx='20' ry='20' fill='#b49393'/>
    <path d='M70 190,H170,L135 100,L110 150,L92.5 130 z' stroke='red' fill='#3700B3'></path>
</mask>
</svg>
`;
const shareUrl = "url('data:image/svg+xml;base64," + btoa(shareSVG) + "')";
const closeUrl = "url('data:image/svg+xml;base64," + btoa(closeSVG) + "')";
const minimizeUrl = "url('data:image/svg+xml;base64," + btoa(minimizeSVG) + "')";
const fullscreenUrl = "url('data:image/svg+xml;base64," + btoa(fullscreenSVG) + "')";
const placeholderUrl = "url('data:image/svg+xml;base64," + btoa(placeholderSVG) + "')";

const jeepPhotoButtonsCss = ":host{display:block;--photo-buttons-height:min(7vmin, 40px);--photo-buttons-padding:3px}.photobuttons-container{position:absolute;top:5vh;left:0;width:100vw;height:var(--photo-buttons-height);background-color:rgba(125,125,125,0.3);visibility:visible}.wrapper{width:100%;height:100%}.share-button{position:absolute;top:0;left:7vmin;width:var(--photo-buttons-height);height:var(--photo-buttons-height);background-position:center;background-repeat:no-repeat;background-size:cover}.mode-button{position:absolute;top:0;left:calc(100vw / 2 - var(--photo-buttons-height) / 2);width:var(--photo-buttons-height);height:var(--photo-buttons-height);background-position:center;background-repeat:no-repeat;background-size:cover}.close-button{position:absolute;top:0;left:calc(100vw - var(--photo-buttons-height) - 7vmin);width:var(--photo-buttons-height);height:var(--photo-buttons-height);background-position:center;background-repeat:no-repeat;background-size:cover}.hidden{visibility:hidden}";

const JeepPhotoButtons$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoButtonsClose = createEvent(this, "jeepPhotoButtonsClose", 7);
    this.onPhotoRequestFullscreen = createEvent(this, "jeepPhotoRequestFullscreen", 7);
    this.onPhotoRequestMinimize = createEvent(this, "jeepPhotoRequestMinimize", 7);
    this.onPhotoButtonsShare = createEvent(this, "jeepPhotoButtonsShare", 7);
    this.share = undefined;
    this.viewmode = undefined;
    this.closebutton = undefined;
    this.fromcomponent = undefined;
    this.innerShare = undefined;
    this.innerViewmode = undefined;
    this.innerCloseButton = undefined;
    this.innerFromComponent = undefined;
    this.visible = undefined;
    this.mode = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseShare(newValue) {
    this.innerShare = newValue;
  }
  parseViewmode(newValue) {
    this.innerViewmode = newValue;
  }
  parseCloseButton(newValue) {
    this.innerCloseButton = newValue;
  }
  parseFromComponent(newValue) {
    this.innerFromComponent = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Photo Buttons.
   */
  setPhotoButtons() {
    return Promise.resolve(this._setPhotoButtons());
  }
  /**
   * Set the Navigation Visibility (visible/hidden)
   */
  setJeepPhotoButtonsVisibility(state) {
    if (state) {
      this._photoButtonsEl.classList.remove('hidden');
      this.visible = true;
    }
    else {
      this._photoButtonsEl.classList.add('hidden');
      this.visible = false;
    }
    return;
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setPhotoButtons();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseShare(this.share ? this.share : "visible");
    this.parseViewmode(this.viewmode ? this.viewmode : "normal");
    this.parseCloseButton(this.closebutton ? this.closebutton : "yes");
    this.parseFromComponent(this.fromcomponent ? this.fromcomponent : "jeep-photoviewer");
    if (this.innerViewmode === "fullscreen") {
      this.mode = "minimize";
      this._modeUrl = minimizeUrl;
    }
    else {
      this.mode = "fullscreen";
      this._modeUrl = fullscreenUrl;
    }
    return;
  }
  async _setPhotoButtons() {
    this._photoButtonsEl = this._element.querySelector('.photobuttons-container');
    if (this.innerShare === "visible" &&
      this.innerFromComponent === "jeep-photo-hscroll") {
      this._shareEl = this._photoButtonsEl.querySelector('.share-button');
      this._shareEl.style.setProperty("background-image", `${shareUrl}`);
    }
    if (this.innerFromComponent === "jeep-photo-hscroll") {
      this._modeEl = this._photoButtonsEl.querySelector('.mode-button');
      this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
    }
    if (this.innerCloseButton === "yes") {
      this._closeEl = this._photoButtonsEl.querySelector('.close-button');
      this._closeEl.style.setProperty("background-image", `${closeUrl}`);
    }
    return;
  }
  _handleClick(button) {
    switch (button) {
      case "share": {
        this.onPhotoButtonsShare.emit();
        break;
      }
      case "close": {
        this.onPhotoButtonsClose.emit({ component: this.innerFromComponent });
        break;
      }
      case "mode": {
        if (this.mode === "fullscreen") {
          this._modeUrl = minimizeUrl;
          this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
          this.onPhotoRequestFullscreen.emit();
          this.mode = "minimize";
        }
        else {
          this._modeUrl = fullscreenUrl;
          this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
          this.onPhotoRequestMinimize.emit();
          this.mode = "fullscreen";
        }
        break;
      }
    }
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRender = [];
    if (this.innerShare === "visible" &&
      this.innerFromComponent === "jeep-photo-hscroll") {
      toRender = [...toRender, h("div", { class: "share-button", onClick: () => this._handleClick("share") })
      ];
    }
    if (this.innerFromComponent === "jeep-photo-hscroll")
      toRender = [...toRender, h("div", { class: "mode-button", onClick: () => this._handleClick("mode") })
      ];
    if (this.innerCloseButton === "yes") {
      toRender = [...toRender, h("div", { class: "close-button", onClick: () => this._handleClick("close") })
      ];
    }
    return (h(Host, null, h("div", { class: "photobuttons-container" }, h("div", { class: "wrapper" }, toRender))));
  }
  get el() { return this; }
  static get watchers() { return {
    "share": ["parseShare"],
    "viewmode": ["parseViewmode"],
    "closebutton": ["parseCloseButton"],
    "fromcomponent": ["parseFromComponent"]
  }; }
  static get style() { return jeepPhotoButtonsCss; }
};

const jeepPhotoHscrollCss = ":host{display:block;--hscroll-background-color:var(--photoviewer-background-color);--hscroll-title-color:#d3d3d3}.hscroll-container{position:absolute;top:0;bottom:0;right:0;left:0;overflow-y:hidden;background-color:var(--hscroll-background-color)}.wrapper{box-sizing:border-box;padding:0;margin:0;position:relative;width:100%;height:100%}.carousel{box-sizing:border-box;margin:0;padding:0;width:100vw;height:100vh;scroll-snap-type:x mandatory;display:flex;-ms-scroll-snap-type:x mandatory;-webkit-scroll-snap-type:x mandatory;-webkit-scroll-snap-destination:0% 0%;-webkit-overflow-scrolling:touch;overflow-x:scroll;-ms-overflow-style:none;visibility:visible}.carousel::-webkit-scrollbar{display:none}.carousel-item{border-right:1px solid white;padding:0;min-width:100vw;min-height:100vh;scroll-snap-align:start;text-align:center;position:relative}.carousel-image{width:100vw;height:100vh;object-fit:contain}.carousel-title{position:absolute;bottom:0;visibility:visible;width:100vw;height:3vh;color:var(--hscroll-title-color);font:2.5vh Arial, sans-serif}.hidden{visibility:hidden}";

const JeepPhotoHscroll$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoHscrollResult = createEvent(this, "jeepPhotoHscrollResult", 7);
    this.onPhotoZoom = createEvent(this, "jeepPhotoZoom", 7);
    this.onPhotoPhotoHscrollClose = createEvent(this, "jeepPhotoHscrollClose", 7);
    this._tapped = false;
    this._tappedTime = null;
    this._tapNum = 0;
    this._timerStart = false;
    this._photoZoomOneTap = false;
    this._ticking = false;
    this._isScrollListener = false;
    this._shareUrl = "";
    this._shareTitle = "";
    this._shareText = "";
    this.position = undefined;
    this.imageList = undefined;
    this.options = undefined;
    this.mode = undefined;
    this.innerImageList = undefined;
    this.innerOptions = undefined;
    this.innerPosition = undefined;
    this.innerMode = undefined;
    this.buttonsVisibility = undefined;
    this.isFullscreen = undefined;
    this.photoZoom = undefined;
    this.share = undefined;
    this.shareShow = false;
    this.titleShow = true;
    this.maxZoomScale = undefined;
    this.currentIndex = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parsePosition(newValue) {
    this.innerPosition = newValue;
  }
  parseImageList(newValue) {
    this.innerImageList = newValue;
  }
  parseOptions(newValue) {
    this.innerOptions = newValue;
  }
  parseMode(newValue) {
    this.innerMode = newValue;
  }
  async handleWindowResize() {
    this._currentPosition = this.currentIndex * this._window.innerWidth;
    await this._scrollToPosition(this.currentIndex);
  }
  async handleJeepPhotoButtonsClose() {
    if (this.isFullscreen) {
      await this._fullscreenExit();
    }
    if (this.innerMode !== 'gallery') {
      this.currentIndex = this.innerMode === 'slider' ? this._getCurrentPhotoIndex() : this.innerPosition;
      this.onPhotoHscrollResult.emit({ result: true, imageIndex: this.currentIndex });
    }
  }
  async handleJeepPhotoButtonsShare() {
    this.shareShow = true;
    this._shareUrl = this.innerImageList[this.currentIndex].url;
    this._shareTitle = this.innerImageList[this.currentIndex].title;
    this._shareText = "Share API Demo";
  }
  async handleJeepPhotoShareCompleted(event) {
    if (event.detail) {
      if (event.detail.result) {
        this.onPhotoHscrollResult.emit({ result: true,
          message: "Photo has been shared successfully" });
      }
      else {
        this.onPhotoHscrollResult.emit({ result: false,
          message: `Error: ${event.detail.message}` });
      }
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: No message returned" });
    }
    this.shareShow = false;
  }
  async handleJeepPhotoFullscreenRequest() {
    await this._fullscreenRequest(document.documentElement);
  }
  async handleJeepPhotoMinimizeRequest() {
    const index = this._getCurrentPhotoIndex();
    await this._fullscreenExit();
    this.currentIndex = index;
  }
  async handleJeepPhotoZoomOneTap() {
    this.photoZoom = false;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    this._photoZoomOneTap = true;
    this.buttonsVisibility = !this.buttonsVisibility;
  }
  async handleJeepPhotoSwipe(event) {
    if (event.detail) {
      if (!this.photoZoom) {
        let direction = event.detail;
        if (direction.up || direction.down) {
          if (this.isFullscreen) {
            await this._fullscreenExit();
          }
          if (this.innerMode !== 'gallery') {
            this.currentIndex = this.innerMode === 'slider' ? this._getCurrentPhotoIndex() : this.innerPosition;
            this.onPhotoHscrollResult.emit({ result: true, imageIndex: this.currentIndex });
          }
          else {
            this.onPhotoPhotoHscrollClose.emit();
          }
        }
      }
    }
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Carousel.
   */
  setCarousel() {
    return Promise.resolve(this._setCarousel());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setCarousel();
  }
  async componentDidRender() {
    if (this._photoZoomOneTap) {
      await this.setCarousel();
      this._photoZoomOneTap = false;
    }
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseImageList(this.imageList ? this.imageList : null);
    this.parseOptions(this.options ? this.options : null);
    this.parseMode(this.mode ? this.mode : "one");
    this.parsePosition(this.position >= 0 ? this.position : 0);
    this.buttonsVisibility = true;
    this.isFullscreen = false;
    this.photoZoom = false;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    this.share = "visible";
    this.share = this.innerOptions != null
      && Object.keys(this.innerOptions).includes("share")
      ? this.innerOptions.share ? "visible" : "hidden"
      : "visible";
    this.titleShow = this.innerOptions != null
      && Object.keys(this.innerOptions).includes("title")
      ? this.innerOptions.title : true;
    this.maxZoomScale = this.innerOptions != null && this.innerOptions.maxzoomscale
      ? this.innerOptions.maxzoomscale : 3.0;
    this.currentIndex = this.innerPosition;
    this._widthFullscreen = this._window.innerWidth;
    return;
  }
  async _setCarousel() {
    this._carouselEl = this._element.querySelector(`.carousel`);
    await this._scrollToPosition(this.currentIndex);
    this._currentPosition = this.currentIndex * this._window.innerWidth;
    this._previousScrollWidth = this._carouselEl.scrollWidth;
    this._carouselEl.classList.remove('hidden');
    if (!this._isScrollListener) {
      this._isScrollListener = true;
      this._carouselEl.addEventListener('scroll', () => {
        if (!this._ticking) {
          setTimeout(async () => {
            if (this._carouselEl.scrollWidth === this._previousScrollWidth) {
              const index = this._getCurrentPhotoIndex();
              if (index !== this.currentIndex) {
                this.currentIndex = index;
              }
            }
            this._ticking = false;
          }, 500);
          this._ticking = true;
        }
      }, false);
    }
    return;
  }
  async _scrollToPosition(index) {
    this._currentPosition = index * this._window.innerWidth;
    if (this._carouselEl)
      this._carouselEl.scrollTo(this._currentPosition, 0);
    return;
  }
  _getCurrentPhotoIndex() {
    let index = 0;
    this._currentPosition = Number(this._carouselEl.scrollLeft);
    if (Math.abs(this._carouselEl.scrollWidth / this.innerImageList.length - this._window.innerWidth) <= 2) {
      // slide constant width
      index = Math.round(this._currentPosition / this._window.innerWidth);
    }
    return index;
  }
  async _fullscreenRequest(elem) {
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    }
    else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    }
    else if (elem.mozRequestFullScreen) {
      elem.mozRequestFullScreen();
    }
    else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: Fullscreen API is not supported." });
    }
    this.isFullscreen = true;
    return;
  }
  async _fullscreenExit() {
    let doc = document;
    if (doc && doc.exitFullscreen) {
      doc.exitFullscreen();
    }
    else if (doc && doc.webkitExitFullscreen) {
      doc.webkitExitFullscreen();
    }
    else if (doc && doc.mozExitFullscreen) {
      doc.mozExitFullscreen();
    }
    else if (doc && doc.msExitFullscreen) {
      doc.msExitFullscreen();
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: Fullscreen API is not supported." });
    }
    this.isFullscreen = false;
    return;
  }
  _handleClick() {
    if (this.innerMode === "gallery" || this.innerMode === "slider") {
      this.currentIndex = this._getCurrentPhotoIndex();
      this._currentPosition = this.currentIndex * this._window.innerWidth;
    }
    else {
      this.currentIndex = this.innerPosition;
    }
    this.buttonsVisibility = !this.buttonsVisibility;
    // launch the zoom in out
    this.photoZoom = true;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRenderImg = [];
    if (this.innerImageList != null && this.innerImageList.length > 0) {
      const classTitle = this.titleShow ? "carousel-title" : "carousel-title hidden";
      if (this.innerMode === "gallery" || this.innerMode === "slider") {
        for (var i = 0; i < this.innerImageList.length; i++) {
          toRenderImg = [...toRenderImg, h("div", { class: "carousel-item", onClick: () => this._handleClick() }, h("img", { src: this.innerImageList[i].url, alt: this.innerImageList[i].title, class: "carousel-image" }), h("p", { class: classTitle }, this.innerImageList[i].title))
          ];
        }
      }
      if (this.innerMode === "one") {
        toRenderImg = [...toRenderImg, h("div", { class: "carousel-item", onClick: () => this._handleClick() }, h("img", { src: this.innerImageList[this.innerPosition].url, alt: this.innerImageList[this.innerPosition].title, class: "carousel-image" }), h("p", { class: classTitle }, this.innerImageList[this.innerPosition].title))
        ];
      }
    }
    //    const closeMode: string = this.innerImageList.length === 1 ? "no" : "yes";
    let toRender = [];
    if (this.buttonsVisibility) {
      const mode = this.isFullscreen ? "fullscreen" : "normal";
      toRender = [...toRender, h("jeep-photo-buttons", { share: this.share, viewmode: mode, closebutton: "yes", fromcomponent: "jeep-photo-hscroll" })
      ];
    }
    let toRenderShare = [];
    if (this.shareShow) {
      toRenderShare = [...toRenderShare, h("jeep-photo-share", { surl: this._shareUrl, stitle: this._shareTitle, stext: this._shareText })
      ];
    }
    return (h(Host, null, h("div", { class: "hscroll-container" }, h("div", { class: "wrapper" }, this.photoZoom
      ?
        h("jeep-photo-zoom", { url: this.innerImageList[this.currentIndex].url, maxzoomscale: this.maxZoomScale })
      :
        h("div", null, h("jeep-photo-swipe", null, h("div", { class: "carousel hidden" }, toRenderImg)), toRender, toRenderShare)))));
  }
  get el() { return this; }
  static get watchers() { return {
    "position": ["parsePosition"],
    "imageList": ["parseImageList"],
    "options": ["parseOptions"],
    "mode": ["parseMode"]
  }; }
  static get style() { return jeepPhotoHscrollCss; }
};

const jeepPhotoShareCss = ":host{display:block;--share-background-color:#000;--share-width:100vw;--share-height:100vh;--share-top:0px;--share-left:0px}.share-container{position:absolute;top:0;bottom:0;right:0;left:0;background-color:var(--zoom-background-color)}.wrapper{padding:0;margin:0;position:relative;width:100%;height:100%}";

const JeepPhotoShare$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoShareCompleted = createEvent(this, "jeepPhotoShareCompleted", 7);
    this.surl = null;
    this.stitle = null;
    this.stext = null;
    this.innerUrl = undefined;
    this.innerTitle = undefined;
    this.innerText = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseUrl(newValue) {
    this.innerUrl = newValue;
  }
  parseTitle(newValue) {
    this.innerTitle = newValue;
  }
  parseText(newValue) {
    this.innerText = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Share.
   */
  setShare() {
    return Promise.resolve(this._setShare());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setShare();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseUrl(this.surl ? this.surl : null);
    this.parseTitle(this.stitle ? this.stitle : null);
    this.parseText(this.stext ? this.stext : null);
    return;
  }
  async _setShare() {
    if (navigator.share) {
      navigator.share({
        title: this.innerTitle,
        url: this.innerUrl,
        text: this.innerText
      })
        .then(() => {
        this.onPhotoShareCompleted.emit({ result: true });
      })
        .catch((error) => {
        this.onPhotoShareCompleted.emit({ result: false, message: error });
      });
    }
    else {
      const msg = "Share not implemented on this browser";
      this.onPhotoShareCompleted.emit({ result: false, message: msg });
    }
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    return (h(Host, null));
  }
  get el() { return this; }
  static get watchers() { return {
    "surl": ["parseUrl"],
    "stitle": ["parseTitle"],
    "stext": ["parseText"]
  }; }
  static get style() { return jeepPhotoShareCss; }
};

const jeepPhotoSwipeCss = "";

const JeepPhotoSwipe$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoSwipe = createEvent(this, "jeepPhotoSwipe", 7);
    this._startPoint = {};
    this._endPoint = {};
    this._totalTime = 0;
    this._getSwipeDirection = (startPoint, endPoint, thresholdX, thresholdY) => {
      var swipeDirection = { up: false, right: false, down: false, left: false };
      if (startPoint.x > endPoint.x && startPoint.x - endPoint.x >= thresholdX)
        swipeDirection.left = true;
      else if (startPoint.x < endPoint.x && endPoint.x - startPoint.x >= thresholdX)
        swipeDirection.right = true;
      if (startPoint.y < endPoint.y && endPoint.y - startPoint.y >= thresholdY)
        swipeDirection.down = true;
      else if (startPoint.y > endPoint.y && startPoint.y - endPoint.y >= thresholdY)
        swipeDirection.up = true;
      return swipeDirection;
    };
    this.timeThreshold = 200;
    this.thresholdX = 100;
    this.thresholdY = 100;
    this.innerTimeThreshold = undefined;
    this.innerThresholdX = undefined;
    this.innerThresholdY = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseTimeThreshold(newValue) {
    this.innerTimeThreshold = newValue;
  }
  parseThresholdX(newValue) {
    this.innerThresholdX = newValue;
  }
  parseThresholdY(newValue) {
    this.innerThresholdY = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * handleTouchStart
   */
  async handleTouchStart(e) {
    this._startPoint.x = e.touches[0].clientX; //This is where touchstart coordinates are stored
    this._startPoint.y = e.touches[0].clientY;
    this._time = setInterval(() => {
      this._totalTime += 10;
    }, 10);
  }
  /**
   * handleTouchEnd
   */
  async handleTouchEnd(e) {
    this._endPoint.x = e.changedTouches[0].clientX;
    this._endPoint.y = e.changedTouches[0].clientY;
    // Let's stop calculating time and free up resources.
    clearInterval(this._time);
    if (this._totalTime >= this.innerTimeThreshold) {
      let res = this._getSwipeDirection(this._startPoint, this._endPoint, this.innerThresholdX, this.innerThresholdY);
      this.onPhotoSwipe.emit({ up: res.up, down: res.down, left: res.left, right: res.right });
    }
    this._totalTime = 0;
  }
  /**
   * handleMouseDown
   */
  async handleMouseDown(e) {
    e.preventDefault();
    this._startPoint.x = e.clientX; //This is where touchstart coordinates are stored
    this._startPoint.y = e.clientY;
    this._time = setInterval(() => {
      this._totalTime += 10;
    }, 10);
  }
  /**
   * handleMouseEUp
   */
  async handleMouseUp(e) {
    this._endPoint.x = e.clientX;
    this._endPoint.y = e.clientY;
    // Let's stop calculating time and free up resources.
    clearInterval(this._time);
    if (this._totalTime >= this.innerTimeThreshold) {
      let res = this._getSwipeDirection(this._startPoint, this._endPoint, this.innerThresholdX, this.innerThresholdY);
      this.onPhotoSwipe.emit({ up: res.up, down: res.down, left: res.left, right: res.right });
    }
    this._totalTime = 0;
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseTimeThreshold(this.timeThreshold ? this.timeThreshold : 200);
    this.parseThresholdX(this.thresholdX ? this.thresholdX : 100);
    this.parseThresholdY(this.thresholdY ? this.thresholdY : 100);
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    return (h(Host, null, h("div", { class: "swipe-container", onTouchStart: (e) => this.handleTouchStart(e), onTouchEnd: (e) => this.handleTouchEnd(e), onMouseDown: (e) => this.handleMouseDown(e), onMouseUp: (e) => this.handleMouseUp(e) }, h("slot", null))));
  }
  get el() { return this; }
  static get watchers() { return {
    "timeThreshold": ["parseTimeThreshold"],
    "thresholdX": ["parseThresholdX"],
    "thresholdY": ["parseThresholdY"]
  }; }
  static get style() { return jeepPhotoSwipeCss; }
};

const jeepPhotoZoomCss = ":host{display:block;--zoom-background-color:var(--photoviewer-background-color);--zoom-width:100vw;--zoom-height:100vh;--zoom-offset-x:0px;--zoom-offset-y:0px;--zoom-top:0px;--zoom-left:0px;--zoom-transform:scale(1) translateX(0px) translateY(0px)}.zoom-container{position:absolute;top:0;bottom:0;right:0;left:0;background-color:var(--zoom-background-color)}.wrapper{padding:0;margin:0;position:relative;width:100%;height:100%}.zoom-item{margin:0;padding:0;width:100vw;height:100vh;position:relative}.zoom-image{position:absolute;offset:var(--zoom-offset-x) var(--zoom-offset-y);top:var(--zoom-top);left:var(--zoom-left);width:var(--zoom-width);height:var(--zoom-height);transform:var(--zoom-transform)}";

const JeepPhotoZoom$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoZoomOneTap = createEvent(this, "jeepPhotoZoomOneTap", 7);
    this._tapedTwice = false;
    this._tapedTime = null;
    this._tapNum = 0;
    this._timerStart = false;
    this._imageNatural = {};
    this._view = {};
    this._imageInView = {};
    this._curPan = {};
    this._startPoint = {};
    this._movePoint = {};
    this._centerPoint = {};
    this._lastPoint = {};
    this._doubleTouch = false;
    this._touchStart = false;
    this._touchMove = false;
    this.url = undefined;
    this.maxzoomscale = 3;
    this.innerUrl = undefined;
    this.innerMaxZoomScale = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseUrl(newValue) {
    this.innerUrl = newValue;
  }
  parseMaxZooScale(newValue) {
    this.innerMaxZoomScale = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Photo.
   */
  setPhoto() {
    return Promise.resolve(this._setPhoto());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setPhoto();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseUrl(this.url ? this.url : null);
    this.parseMaxZooScale(this.maxzoomscale ? this.maxzoomscale : 3);
    this._curZoomScale = 1.0;
    this._curPan = { x: 0, y: 0 };
    this._lastPoint = { x: this._window.innerWidth / 2, y: this._window.innerHeight / 2 };
    return;
  }
  async _setPhoto() {
    this._photoEl = this._element.querySelector('.zoom-item');
    // Define Listeners
    this._photoEl.addEventListener("touchstart", this._startHandler.bind(this));
    this._photoEl.addEventListener("touchmove", this._moveHandler.bind(this));
    this._photoEl.addEventListener("touchend", this._endHandler.bind(this));
    this._photoEl.addEventListener('mousedown', this._startHandler.bind(this));
    this._photoEl.addEventListener('mousemove', this._moveHandler.bind(this));
    this._photoEl.addEventListener('mouseup', this._endHandler.bind(this));
    await this.setImage();
    this._imageEl = this._photoEl.querySelector('.zoom-image');
    // View Size
    this._view = { left: 0, top: 0, width: this._window.innerWidth,
      height: this._window.innerHeight };
    // Image Natural Size
    this._imageNatural = { left: 0, top: 0, width: this._imageEl.naturalWidth,
      height: this._imageEl.naturalHeight };
    // Image in View
    this._imageInView = this._calculateImageInView();
    // Set the maximum scale
    this._maxZoomScale = this._calculateMaxZooScale();
    // Set host properties
    this._setHostProperties(this._curZoomScale, this._curPan);
    // Set the lastPoint to the View center
    this._lastPoint.x = this._imageInView.width / 2;
    this._lastPoint.y = this._imageInView.height / 2;
    return;
  }
  async setImage() {
    return new Promise((resolve) => {
      var img = new Image();
      img.onload = () => {
        this._photoEl.append(img);
        resolve();
      };
      img.src = this.innerUrl;
      img.className = 'zoom-image';
    });
  }
  _setHostProperties(scale, pan) {
    const transform = `scale(${scale}) translateX(${pan.x}px) translateY(${pan.y}px)`;
    this.el.style.setProperty('--zoom-left', `${this._imageInView.left}px`);
    this.el.style.setProperty('--zoom-top', `${this._imageInView.top}px`);
    this.el.style.setProperty('--zoom-width', `${this._imageInView.width}px`);
    this.el.style.setProperty('--zoom-height', `${this._imageInView.height}px`);
    this.el.style.setProperty('--zoom-transform', `${transform}`);
  }
  _calculateImageInView() {
    let imageRect = {};
    const scale = Math.max(this._imageNatural.width / this._view.width, this._imageNatural.height / this._view.height);
    imageRect.width = this._imageNatural.width / scale;
    imageRect.height = this._imageNatural.height / scale;
    imageRect.left = Math.max(0, (this._view.width - imageRect.width) / 2);
    imageRect.top = Math.max(0, (this._view.height - imageRect.height) / 2);
    return imageRect;
  }
  _calculateMaxZooScale() {
    return Math.max(this.innerMaxZoomScale, Math.max(this._view.width / this._imageInView.width, this._view.height / this._imageInView.height));
  }
  _getTouchPoint(event) {
    let point = {};
    if (event.targetTouches) {
      // Touch Events
      point.x = event.targetTouches[0].clientX;
      point.y = event.targetTouches[0].clientY;
    }
    else {
      // Mouse event
      point.x = event.clientX;
      point.y = event.clientY;
    }
    return point;
  }
  //******************************
  //* Handling Gesture Events    *
  //******************************
  _startHandler(event) {
    event.preventDefault();
    this._startPoint = this._getTouchPoint(event);
    if (!this._tapedTwice) {
      this._tapedTwice = true;
      this._tapedTime = setTimeout(() => {
        this._touchStart = true;
        this._tapNum = 1;
        this._endHandler();
      }, 300);
      return false;
    }
    //action on double tap goes below
    this._tapNum = 2;
    this._lastPoint = { x: this._startPoint.x, y: this._startPoint.y };
    clearTimeout(this._tapedTime);
    this._touchStart = true;
  }
  _moveHandler(event) {
    if (this._tapedTwice) {
      this._movePoint = this._getTouchPoint(event);
      this._touchMove = true;
      const deltaPoint = { x: this._lastPoint.x - this._movePoint.x,
        y: this._lastPoint.y - this._movePoint.y };
      this._curPan.x += deltaPoint.x * (this._maxZoomScale - 1) / this._maxZoomScale;
      this._curPan.y += deltaPoint.y * (this._maxZoomScale - 1) / this._maxZoomScale;
      this._lastPoint = this._movePoint;
      this._setHostProperties(this._maxZoomScale, this._curPan);
      this._touchStart = false;
    }
  }
  _endHandler() {
    if (this._touchStart && this._tapNum > 0) {
      if (this._tapNum === 2) {
        if (!this._touchMove) {
          this._handleDoubleTap(this._startPoint);
        }
        else {
          this._tapNum = 0;
          this._tapedTwice = false;
          this._touchStart = false;
          this._touchMove = false;
          this._curZoomScale = 1;
          this._curPan = { x: 0, y: 0 };
          this._setHostProperties(this._curZoomScale, this._curPan);
        }
      }
      else if (this._tapNum === 1) {
        this._curZoomScale = 1;
        this._handleSingleTap();
        this._tapNum = 0;
        this._tapedTwice = false;
        this._touchStart = false;
      }
    }
  }
  _handleSingleTap() {
    this.onPhotoZoomOneTap.emit();
  }
  _handleDoubleTap(pt) {
    if (this._curZoomScale === 1) {
      this._curZoomScale = this._maxZoomScale;
      this._curPan.x = (this._view.width / 2 - pt.x) * (this._curZoomScale - 1) / this._curZoomScale;
      this._curPan.y = (this._view.height / 2 - pt.y) * (this._curZoomScale - 1) / this._curZoomScale;
      this._setHostProperties(this._curZoomScale, this._curPan);
    }
    else {
      this._curZoomScale = 1;
      this._curPan = { x: 0, y: 0 };
      this._setHostProperties(this._curZoomScale, this._curPan);
    }
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    return (h(Host, null, h("div", { class: "zoom-container" }, h("div", { class: "wrapper" }, h("div", { class: "zoom-item" })))));
  }
  get el() { return this; }
  static get watchers() { return {
    "url": ["parseUrl"],
    "maxzoomscale": ["parseMaxZooScale"]
  }; }
  static get style() { return jeepPhotoZoomCss; }
};

const jeepPhotoviewerCss = ":host{display:block;--gallery-box-width:33.33vw;--gallery-template-columns:auto auto auto;--photoviewer-background-color:black}.photoviewer-container::-webkit-scrollbar{display:none}.photoviewer-container{-ms-autohiding-scrollbar:none;scrollbar-width:0}.wrapper{position:absolute;top:0;left:0;display:grid;width:100vw;grid-template-columns:var(--gallery-template-columns);grid-row-gap:2px;column-gap:2px;background-color:var(--photoviewer-background-color)}.placeholder{width:var(--gallery-box-width);height:var(--gallery-box-width);line-height:var(--gallery-box-width);text-align:center;background-position:center;background-repeat:no-repeat;background-size:cover;background-color:#bdbbbb}.image{width:100%;background-position:center;background-repeat:no-repeat;background-size:cover;background-color:#fffff0}";

const JeepPhotoviewer$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoViewerResult = createEvent(this, "jeepPhotoViewerResult", 7);
    //**********************************
    //* Internal Variables Declaration *
    //**********************************
    this._isScale = false;
    this._backRange = ["white", "ivory", "lightgrey", "darkgrey",
      "dimgrey", "grey", "black"];
    this.imageList = undefined;
    this.options = undefined;
    this.mode = undefined;
    this.startFrom = undefined;
    this.innerImageList = undefined;
    this.innerOptions = undefined;
    this.innerMode = undefined;
    this.innerStartFrom = undefined;
    this.showHScroll = false;
    this.close = false;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseImageList(newValue) {
    this.innerImageList = newValue;
  }
  parseOptions(newValue) {
    this.innerOptions = newValue;
  }
  parseMode(newValue) {
    const expMode = ["one", "gallery", "slider"];
    const val = expMode.includes(newValue) ? newValue : "one";
    this.innerMode = val;
  }
  parseStartFrom(newValue) {
    const val = newValue < 0 || newValue > this.innerImageList.length ? 0 : newValue;
    this.innerStartFrom = val;
  }
  //*******************************
  //* Listen to Event Definitions *
  //*******************************
  handleWindowResize() {
    this._windowResize();
  }
  async handleJeepPhotoHscrollClose() {
    if (this.innerMode === "gallery") {
      this.close = false;
      await this.closePhotoHScroll();
    }
  }
  async handleJeepPhotoButtonsClose(event) {
    if (this.innerMode === "gallery") {
      if (event.detail.component === "jeep-photo-hscroll") {
        this.close = false;
        await this.closePhotoHScroll();
      }
      else {
        this.close = true;
        this.onPhotoViewerResult.emit({ result: true });
      }
    }
    if (this.innerMode === "one" || this.innerMode === "slider") {
      this.close = true;
    }
  }
  handleJeepPhotoHscrollResult(event) {
    if (event.detail) {
      this.onPhotoViewerResult.emit(event.detail);
    }
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  closePhotoHScroll() {
    return Promise.resolve(this._closeHScroll());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseImageList(this.imageList ? this.imageList : null);
    this.parseOptions(this.options ? this.options : null);
    this.parseMode(this.mode ? this.mode : "one");
    let stFrom = 0;
    if (this.startFrom != null) {
      stFrom = this.startFrom > this.imageList.length - 1 ? this.imageList.length - 1
        : this.startFrom;
    }
    this.parseStartFrom(stFrom);
    this._setProperties();
    return;
  }
  async _windowResize() {
    this._setProperties();
  }
  _setProperties() {
    if (this.innerImageList == null || this.innerImageList.length == 0) {
      this.onPhotoViewerResult.emit({ result: false,
        message: "You must provide an image or an image array" });
    }
    if ((this.innerMode === "gallery" || this.innerMode === "slider")
      && this.innerImageList.length <= 1) {
      this.onPhotoViewerResult.emit({ result: false,
        message: `Image array should be greater than one for mode : ${this.innerMode}` });
    }
    if (this.innerMode === "gallery") {
      var spanCount = this.options != null && this.options.spancount
        ? this.options.spancount : 3;
      if (this._window.innerWidth > this._window.innerHeight)
        spanCount += 1;
    }
    else if (this.innerMode === "slider") {
      spanCount = 1;
      this._selPos = this.innerStartFrom;
      this.showHScroll = true;
    }
    else if (this.innerMode === "one") {
      spanCount = 1;
      this._selPos = this.innerImageList.length > 1 ? this.innerStartFrom : 0;
      this.showHScroll = true;
    }
    else {
      this.onPhotoViewerResult.emit({ result: false,
        message: "mode must be in ['one', 'gallery', 'slider']" });
    }
    const boxWidth = (100 / spanCount).toFixed(4);
    var tempColumns = ``;
    for (let i = 0; i < spanCount; i++) {
      tempColumns += `auto `;
    }
    tempColumns = tempColumns.substring(0, tempColumns.length - 1);
    var backColor = this.options != null &&
      this._backRange.includes(this.options.backgroundcolor)
      ? this.options.backgroundcolor : "black";
    this.el.style.setProperty('--gallery-box-width', `${boxWidth}vw`);
    this.el.style.setProperty('--gallery-template-columns', `${tempColumns}`);
    this.el.style.setProperty('--photoviewer-background-color', `${backColor}`);
  }
  _handleClick(boxId) {
    this._selPos = Number(boxId.substr(boxId.lastIndexOf("-") + 1));
    this.showHScroll = true;
  }
  async _closeHScroll() {
    this.showHScroll = false;
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRender = [];
    if (this.innerImageList != null && this.innerImageList.length > 0) {
      for (var i = 0; i < this.innerImageList.length; i++) {
        const placeHolderStyle = { "background-image": `${placeholderUrl}` };
        const elStyle = { "background-image": `url(${this.innerImageList[i].url})` };
        const boxId = `gallery-box-${i}`;
        if (this.innerMode === "gallery") {
          toRender = [...toRender, h("div", { class: "placeholder", style: placeHolderStyle }, h("div", { id: boxId, class: "image", onClick: () => this._handleClick(boxId), style: elStyle }, h("img", null)))
          ];
        }
        else {
          toRender = [...toRender, h("div", { class: "placeholder", style: placeHolderStyle }, h("div", { id: boxId, class: "image", style: elStyle }, h("img", null)))
          ];
        }
      }
    }
    return (h(Host, null, !this.close
      ?
        h("div", { class: "photoviewer-container" }, this.showHScroll
          ?
            h("jeep-photo-hscroll", { position: this._selPos, imageList: this.innerImageList, options: this.innerOptions, mode: this.innerMode })
          :
            h("div", { class: "wrapper" }, toRender, h("jeep-photo-buttons", { share: "false", viewmode: "normal", closebutton: "yes", fromcomponent: "jeep-photoviewer" })))
      :
        null));
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return this; }
  static get watchers() { return {
    "imageList": ["parseImageList"],
    "options": ["parseOptions"],
    "mode": ["parseMode"],
    "startFrom": ["parseStartFrom"]
  }; }
  static get style() { return jeepPhotoviewerCss; }
};

const JeepPhotoButtons = /*@__PURE__*/proxyCustomElement(JeepPhotoButtons$1, [1,"jeep-photo-buttons",{"share":[513,"sharevisible"],"viewmode":[513],"closebutton":[513],"fromcomponent":[513],"innerShare":[32],"innerViewmode":[32],"innerCloseButton":[32],"innerFromComponent":[32],"visible":[32],"mode":[32]}]);
const JeepPhotoHscroll = /*@__PURE__*/proxyCustomElement(JeepPhotoHscroll$1, [1,"jeep-photo-hscroll",{"position":[514,"selposition"],"imageList":[16],"options":[16],"mode":[513,"pvmode"],"innerImageList":[32],"innerOptions":[32],"innerPosition":[32],"innerMode":[32],"buttonsVisibility":[32],"isFullscreen":[32],"photoZoom":[32],"share":[32],"shareShow":[32],"titleShow":[32],"maxZoomScale":[32],"currentIndex":[32]},[[9,"resize","handleWindowResize"],[0,"jeepPhotoButtonsClose","handleJeepPhotoButtonsClose"],[0,"jeepPhotoButtonsShare","handleJeepPhotoButtonsShare"],[0,"jeepPhotoShareCompleted","handleJeepPhotoShareCompleted"],[0,"jeepPhotoRequestFullscreen","handleJeepPhotoFullscreenRequest"],[0,"jeepPhotoRequestMinimize","handleJeepPhotoMinimizeRequest"],[0,"jeepPhotoZoomOneTap","handleJeepPhotoZoomOneTap"],[0,"jeepPhotoSwipe","handleJeepPhotoSwipe"]]]);
const JeepPhotoShare = /*@__PURE__*/proxyCustomElement(JeepPhotoShare$1, [1,"jeep-photo-share",{"surl":[513],"stitle":[513],"stext":[513],"innerUrl":[32],"innerTitle":[32],"innerText":[32]}]);
const JeepPhotoSwipe = /*@__PURE__*/proxyCustomElement(JeepPhotoSwipe$1, [1,"jeep-photo-swipe",{"timeThreshold":[514,"timethreshold"],"thresholdX":[514,"thresholdx"],"thresholdY":[514,"thresholdy"],"innerTimeThreshold":[32],"innerThresholdX":[32],"innerThresholdY":[32]}]);
const JeepPhotoZoom = /*@__PURE__*/proxyCustomElement(JeepPhotoZoom$1, [1,"jeep-photo-zoom",{"url":[513],"maxzoomscale":[514],"innerUrl":[32],"innerMaxZoomScale":[32]}]);
const JeepPhotoviewer = /*@__PURE__*/proxyCustomElement(JeepPhotoviewer$1, [1,"jeep-photoviewer",{"imageList":[16],"options":[16],"mode":[513,"pvmode"],"startFrom":[514,"pvstartfrom"],"innerImageList":[32],"innerOptions":[32],"innerMode":[32],"innerStartFrom":[32],"showHScroll":[32],"close":[32]},[[9,"resize","handleWindowResize"],[0,"jeepPhotoHscrollClose","handleJeepPhotoHscrollClose"],[0,"jeepPhotoButtonsClose","handleJeepPhotoButtonsClose"],[0,"jeepPhotoHscrollResult","handleJeepPhotoHscrollResult"]]]);
const defineCustomElements = (opts) => {
  if (typeof customElements !== 'undefined') {
    [
      JeepPhotoButtons,
  JeepPhotoHscroll,
  JeepPhotoShare,
  JeepPhotoSwipe,
  JeepPhotoZoom,
  JeepPhotoviewer
    ].forEach(cmp => {
      if (!customElements.get(cmp.is)) {
        customElements.define(cmp.is, cmp, opts);
      }
    });
  }
};

export { JeepPhotoButtons, JeepPhotoHscroll, JeepPhotoShare, JeepPhotoSwipe, JeepPhotoZoom, JeepPhotoviewer, defineCustomElements };
