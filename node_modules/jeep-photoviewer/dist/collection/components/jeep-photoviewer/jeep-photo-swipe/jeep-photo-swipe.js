import { h, Host } from '@stencil/core';
export class JeepPhotoSwipe {
  constructor() {
    this._startPoint = {};
    this._endPoint = {};
    this._totalTime = 0;
    this._getSwipeDirection = (startPoint, endPoint, thresholdX, thresholdY) => {
      var swipeDirection = { up: false, right: false, down: false, left: false };
      if (startPoint.x > endPoint.x && startPoint.x - endPoint.x >= thresholdX)
        swipeDirection.left = true;
      else if (startPoint.x < endPoint.x && endPoint.x - startPoint.x >= thresholdX)
        swipeDirection.right = true;
      if (startPoint.y < endPoint.y && endPoint.y - startPoint.y >= thresholdY)
        swipeDirection.down = true;
      else if (startPoint.y > endPoint.y && startPoint.y - endPoint.y >= thresholdY)
        swipeDirection.up = true;
      return swipeDirection;
    };
    this.timeThreshold = 200;
    this.thresholdX = 100;
    this.thresholdY = 100;
    this.innerTimeThreshold = undefined;
    this.innerThresholdX = undefined;
    this.innerThresholdY = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseTimeThreshold(newValue) {
    this.innerTimeThreshold = newValue;
  }
  parseThresholdX(newValue) {
    this.innerThresholdX = newValue;
  }
  parseThresholdY(newValue) {
    this.innerThresholdY = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * handleTouchStart
   */
  async handleTouchStart(e) {
    this._startPoint.x = e.touches[0].clientX; //This is where touchstart coordinates are stored
    this._startPoint.y = e.touches[0].clientY;
    ;
    this._time = setInterval(() => {
      this._totalTime += 10;
    }, 10);
  }
  /**
   * handleTouchEnd
   */
  async handleTouchEnd(e) {
    this._endPoint.x = e.changedTouches[0].clientX;
    this._endPoint.y = e.changedTouches[0].clientY;
    // Let's stop calculating time and free up resources.
    clearInterval(this._time);
    if (this._totalTime >= this.innerTimeThreshold) {
      let res = this._getSwipeDirection(this._startPoint, this._endPoint, this.innerThresholdX, this.innerThresholdY);
      this.onPhotoSwipe.emit({ up: res.up, down: res.down, left: res.left, right: res.right });
    }
    this._totalTime = 0;
  }
  /**
   * handleMouseDown
   */
  async handleMouseDown(e) {
    e.preventDefault();
    this._startPoint.x = e.clientX; //This is where touchstart coordinates are stored
    this._startPoint.y = e.clientY;
    ;
    this._time = setInterval(() => {
      this._totalTime += 10;
    }, 10);
  }
  /**
   * handleMouseEUp
   */
  async handleMouseUp(e) {
    this._endPoint.x = e.clientX;
    this._endPoint.y = e.clientY;
    // Let's stop calculating time and free up resources.
    clearInterval(this._time);
    if (this._totalTime >= this.innerTimeThreshold) {
      let res = this._getSwipeDirection(this._startPoint, this._endPoint, this.innerThresholdX, this.innerThresholdY);
      this.onPhotoSwipe.emit({ up: res.up, down: res.down, left: res.left, right: res.right });
    }
    this._totalTime = 0;
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseTimeThreshold(this.timeThreshold ? this.timeThreshold : 200);
    this.parseThresholdX(this.thresholdX ? this.thresholdX : 100);
    this.parseThresholdY(this.thresholdY ? this.thresholdY : 100);
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    return (h(Host, null, h("div", { class: "swipe-container", onTouchStart: (e) => this.handleTouchStart(e), onTouchEnd: (e) => this.handleTouchEnd(e), onMouseDown: (e) => this.handleMouseDown(e), onMouseUp: (e) => this.handleMouseUp(e) }, h("slot", null))));
  }
  static get is() { return "jeep-photo-swipe"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["jeep-photo-swipe.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["jeep-photo-swipe.css"]
    };
  }
  static get properties() {
    return {
      "timeThreshold": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The swipe timeThreshold"
        },
        "attribute": "timethreshold",
        "reflect": true,
        "defaultValue": "200"
      },
      "thresholdX": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The swipe threshold in x direction"
        },
        "attribute": "thresholdx",
        "reflect": true,
        "defaultValue": "100"
      },
      "thresholdY": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The swipe threshold in y direction"
        },
        "attribute": "thresholdy",
        "reflect": true,
        "defaultValue": "100"
      }
    };
  }
  static get states() {
    return {
      "innerTimeThreshold": {},
      "innerThresholdX": {},
      "innerThresholdY": {}
    };
  }
  static get events() {
    return [{
        "method": "onPhotoSwipe",
        "name": "jeepPhotoSwipe",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the user is making a swipe gesture"
        },
        "complexType": {
          "original": "IJeepSwipeEvent",
          "resolved": "IJeepSwipeEvent",
          "references": {
            "IJeepSwipeEvent": {
              "location": "import",
              "path": "../../../interfaces/interfaces"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "init": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Method initialize",
          "tags": []
        }
      },
      "handleTouchStart": {
        "complexType": {
          "signature": "(e: any) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "handleTouchStart",
          "tags": []
        }
      },
      "handleTouchEnd": {
        "complexType": {
          "signature": "(e: TouchEvent) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "TouchEvent": {
              "location": "global"
            },
            "IJeepSwipeEvent": {
              "location": "import",
              "path": "../../../interfaces/interfaces"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "handleTouchEnd",
          "tags": []
        }
      },
      "handleMouseDown": {
        "complexType": {
          "signature": "(e: any) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "handleMouseDown",
          "tags": []
        }
      },
      "handleMouseUp": {
        "complexType": {
          "signature": "(e: any) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "IJeepSwipeEvent": {
              "location": "import",
              "path": "../../../interfaces/interfaces"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "handleMouseEUp",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "timeThreshold",
        "methodName": "parseTimeThreshold"
      }, {
        "propName": "thresholdX",
        "methodName": "parseThresholdX"
      }, {
        "propName": "thresholdY",
        "methodName": "parseThresholdY"
      }];
  }
}
