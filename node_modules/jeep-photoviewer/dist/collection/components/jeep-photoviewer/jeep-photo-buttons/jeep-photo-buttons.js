import { h, Host } from '@stencil/core';
import { shareUrl, closeUrl, minimizeUrl, fullscreenUrl } from '../../../utils/svg-utils';
export class JeepPhotoButtons {
  constructor() {
    this.share = undefined;
    this.viewmode = undefined;
    this.closebutton = undefined;
    this.fromcomponent = undefined;
    this.innerShare = undefined;
    this.innerViewmode = undefined;
    this.innerCloseButton = undefined;
    this.innerFromComponent = undefined;
    this.visible = undefined;
    this.mode = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseShare(newValue) {
    this.innerShare = newValue;
  }
  parseViewmode(newValue) {
    this.innerViewmode = newValue;
  }
  parseCloseButton(newValue) {
    this.innerCloseButton = newValue;
  }
  parseFromComponent(newValue) {
    this.innerFromComponent = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Photo Buttons.
   */
  setPhotoButtons() {
    return Promise.resolve(this._setPhotoButtons());
  }
  /**
   * Set the Navigation Visibility (visible/hidden)
   */
  setJeepPhotoButtonsVisibility(state) {
    if (state) {
      this._photoButtonsEl.classList.remove('hidden');
      this.visible = true;
    }
    else {
      this._photoButtonsEl.classList.add('hidden');
      this.visible = false;
    }
    return;
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setPhotoButtons();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseShare(this.share ? this.share : "visible");
    this.parseViewmode(this.viewmode ? this.viewmode : "normal");
    this.parseCloseButton(this.closebutton ? this.closebutton : "yes");
    this.parseFromComponent(this.fromcomponent ? this.fromcomponent : "jeep-photoviewer");
    if (this.innerViewmode === "fullscreen") {
      this.mode = "minimize";
      this._modeUrl = minimizeUrl;
    }
    else {
      this.mode = "fullscreen";
      this._modeUrl = fullscreenUrl;
    }
    return;
  }
  async _setPhotoButtons() {
    this._photoButtonsEl = this._element.querySelector('.photobuttons-container');
    if (this.innerShare === "visible" &&
      this.innerFromComponent === "jeep-photo-hscroll") {
      this._shareEl = this._photoButtonsEl.querySelector('.share-button');
      this._shareEl.style.setProperty("background-image", `${shareUrl}`);
    }
    if (this.innerFromComponent === "jeep-photo-hscroll") {
      this._modeEl = this._photoButtonsEl.querySelector('.mode-button');
      this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
    }
    if (this.innerCloseButton === "yes") {
      this._closeEl = this._photoButtonsEl.querySelector('.close-button');
      this._closeEl.style.setProperty("background-image", `${closeUrl}`);
    }
    return;
  }
  _handleClick(button) {
    switch (button) {
      case "share": {
        this.onPhotoButtonsShare.emit();
        break;
      }
      case "close": {
        this.onPhotoButtonsClose.emit({ component: this.innerFromComponent });
        break;
      }
      case "mode": {
        if (this.mode === "fullscreen") {
          this._modeUrl = minimizeUrl;
          this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
          this.onPhotoRequestFullscreen.emit();
          this.mode = "minimize";
        }
        else {
          this._modeUrl = fullscreenUrl;
          this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
          this.onPhotoRequestMinimize.emit();
          this.mode = "fullscreen";
        }
        break;
      }
    }
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRender = [];
    if (this.innerShare === "visible" &&
      this.innerFromComponent === "jeep-photo-hscroll") {
      toRender = [...toRender, h("div", { class: "share-button", onClick: () => this._handleClick("share") })
      ];
    }
    if (this.innerFromComponent === "jeep-photo-hscroll")
      toRender = [...toRender, h("div", { class: "mode-button", onClick: () => this._handleClick("mode") })
      ];
    if (this.innerCloseButton === "yes") {
      toRender = [...toRender, h("div", { class: "close-button", onClick: () => this._handleClick("close") })
      ];
    }
    return (h(Host, null, h("div", { class: "photobuttons-container" }, h("div", { class: "wrapper" }, toRender))));
  }
  static get is() { return "jeep-photo-buttons"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["jeep-photo-buttons.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["jeep-photo-buttons.css"]
    };
  }
  static get properties() {
    return {
      "share": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Share button visible"
        },
        "attribute": "sharevisible",
        "reflect": true
      },
      "viewmode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Mode \"fullscreen\" / \"normal\""
        },
        "attribute": "viewmode",
        "reflect": true
      },
      "closebutton": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Close button visible"
        },
        "attribute": "closebutton",
        "reflect": true
      },
      "fromcomponent": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "From component"
        },
        "attribute": "fromcomponent",
        "reflect": true
      }
    };
  }
  static get states() {
    return {
      "innerShare": {},
      "innerViewmode": {},
      "innerCloseButton": {},
      "innerFromComponent": {},
      "visible": {},
      "mode": {}
    };
  }
  static get events() {
    return [{
        "method": "onPhotoButtonsClose",
        "name": "jeepPhotoButtonsClose",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the close button was clicked"
        },
        "complexType": {
          "original": "{component: string}",
          "resolved": "{ component: string; }",
          "references": {}
        }
      }, {
        "method": "onPhotoRequestFullscreen",
        "name": "jeepPhotoRequestFullscreen",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the fullscreen mode button was clicked"
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "onPhotoRequestMinimize",
        "name": "jeepPhotoRequestMinimize",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the minimize mode button was clicked"
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "onPhotoButtonsShare",
        "name": "jeepPhotoButtonsShare",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the share button was clicked"
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "init": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Method initialize",
          "tags": []
        }
      },
      "setPhotoButtons": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Set the Photo Buttons.",
          "tags": []
        }
      },
      "setJeepPhotoButtonsVisibility": {
        "complexType": {
          "signature": "(state: boolean) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Set the Navigation Visibility (visible/hidden)",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "share",
        "methodName": "parseShare"
      }, {
        "propName": "viewmode",
        "methodName": "parseViewmode"
      }, {
        "propName": "closebutton",
        "methodName": "parseCloseButton"
      }, {
        "propName": "fromcomponent",
        "methodName": "parseFromComponent"
      }];
  }
}
