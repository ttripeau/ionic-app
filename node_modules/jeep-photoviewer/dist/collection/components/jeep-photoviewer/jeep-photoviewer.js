import { h, Host } from '@stencil/core';
import { placeholderUrl } from '../../utils/svg-utils';
export class JeepPhotoviewer {
  constructor() {
    //**********************************
    //* Internal Variables Declaration *
    //**********************************
    this._isScale = false;
    this._backRange = ["white", "ivory", "lightgrey", "darkgrey",
      "dimgrey", "grey", "black"];
    this.imageList = undefined;
    this.options = undefined;
    this.mode = undefined;
    this.startFrom = undefined;
    this.innerImageList = undefined;
    this.innerOptions = undefined;
    this.innerMode = undefined;
    this.innerStartFrom = undefined;
    this.showHScroll = false;
    this.close = false;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseImageList(newValue) {
    this.innerImageList = newValue;
  }
  parseOptions(newValue) {
    this.innerOptions = newValue;
  }
  parseMode(newValue) {
    const expMode = ["one", "gallery", "slider"];
    const val = expMode.includes(newValue) ? newValue : "one";
    this.innerMode = val;
  }
  parseStartFrom(newValue) {
    const val = newValue < 0 || newValue > this.innerImageList.length ? 0 : newValue;
    this.innerStartFrom = val;
  }
  //*******************************
  //* Listen to Event Definitions *
  //*******************************
  handleWindowResize() {
    this._windowResize();
  }
  async handleJeepPhotoHscrollClose() {
    if (this.innerMode === "gallery") {
      this.close = false;
      await this.closePhotoHScroll();
    }
  }
  async handleJeepPhotoButtonsClose(event) {
    if (this.innerMode === "gallery") {
      if (event.detail.component === "jeep-photo-hscroll") {
        this.close = false;
        await this.closePhotoHScroll();
      }
      else {
        this.close = true;
        this.onPhotoViewerResult.emit({ result: true });
      }
    }
    if (this.innerMode === "one" || this.innerMode === "slider") {
      this.close = true;
    }
  }
  handleJeepPhotoHscrollResult(event) {
    if (event.detail) {
      this.onPhotoViewerResult.emit(event.detail);
    }
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  closePhotoHScroll() {
    return Promise.resolve(this._closeHScroll());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseImageList(this.imageList ? this.imageList : null);
    this.parseOptions(this.options ? this.options : null);
    this.parseMode(this.mode ? this.mode : "one");
    let stFrom = 0;
    if (this.startFrom != null) {
      stFrom = this.startFrom > this.imageList.length - 1 ? this.imageList.length - 1
        : this.startFrom;
    }
    this.parseStartFrom(stFrom);
    this._setProperties();
    return;
  }
  async _windowResize() {
    this._setProperties();
  }
  _setProperties() {
    if (this.innerImageList == null || this.innerImageList.length == 0) {
      this.onPhotoViewerResult.emit({ result: false,
        message: "You must provide an image or an image array" });
    }
    if ((this.innerMode === "gallery" || this.innerMode === "slider")
      && this.innerImageList.length <= 1) {
      this.onPhotoViewerResult.emit({ result: false,
        message: `Image array should be greater than one for mode : ${this.innerMode}` });
    }
    if (this.innerMode === "gallery") {
      var spanCount = this.options != null && this.options.spancount
        ? this.options.spancount : 3;
      if (this._window.innerWidth > this._window.innerHeight)
        spanCount += 1;
    }
    else if (this.innerMode === "slider") {
      spanCount = 1;
      this._selPos = this.innerStartFrom;
      this.showHScroll = true;
    }
    else if (this.innerMode === "one") {
      spanCount = 1;
      this._selPos = this.innerImageList.length > 1 ? this.innerStartFrom : 0;
      this.showHScroll = true;
    }
    else {
      this.onPhotoViewerResult.emit({ result: false,
        message: "mode must be in ['one', 'gallery', 'slider']" });
    }
    const boxWidth = (100 / spanCount).toFixed(4);
    var tempColumns = ``;
    for (let i = 0; i < spanCount; i++) {
      tempColumns += `auto `;
    }
    tempColumns = tempColumns.substring(0, tempColumns.length - 1);
    var backColor = this.options != null &&
      this._backRange.includes(this.options.backgroundcolor)
      ? this.options.backgroundcolor : "black";
    this.el.style.setProperty('--gallery-box-width', `${boxWidth}vw`);
    this.el.style.setProperty('--gallery-template-columns', `${tempColumns}`);
    this.el.style.setProperty('--photoviewer-background-color', `${backColor}`);
  }
  _handleClick(boxId) {
    this._selPos = Number(boxId.substr(boxId.lastIndexOf("-") + 1));
    this.showHScroll = true;
  }
  async _closeHScroll() {
    this.showHScroll = false;
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRender = [];
    if (this.innerImageList != null && this.innerImageList.length > 0) {
      for (var i = 0; i < this.innerImageList.length; i++) {
        const placeHolderStyle = { "background-image": `${placeholderUrl}` };
        const elStyle = { "background-image": `url(${this.innerImageList[i].url})` };
        const boxId = `gallery-box-${i}`;
        if (this.innerMode === "gallery") {
          toRender = [...toRender, h("div", { class: "placeholder", style: placeHolderStyle }, h("div", { id: boxId, class: "image", onClick: () => this._handleClick(boxId), style: elStyle }, h("img", null)))
          ];
        }
        else {
          toRender = [...toRender, h("div", { class: "placeholder", style: placeHolderStyle }, h("div", { id: boxId, class: "image", style: elStyle }, h("img", null)))
          ];
        }
      }
    }
    return (h(Host, null, !this.close
      ?
        h("div", { class: "photoviewer-container" }, this.showHScroll
          ?
            h("jeep-photo-hscroll", { position: this._selPos, imageList: this.innerImageList, options: this.innerOptions, mode: this.innerMode })
          :
            h("div", { class: "wrapper" }, toRender, h("jeep-photo-buttons", { share: "false", viewmode: "normal", closebutton: "yes", fromcomponent: "jeep-photoviewer" })))
      :
        null));
  }
  static get is() { return "jeep-photoviewer"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["jeep-photoviewer.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["jeep-photoviewer.css"]
    };
  }
  static get assetsDirs() { return ["assets"]; }
  static get properties() {
    return {
      "imageList": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Image[]",
          "resolved": "Image[]",
          "references": {
            "Image": {
              "location": "import",
              "path": "../../interfaces/interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The Image List"
        }
      },
      "options": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ViewerOptions",
          "resolved": "ViewerOptions",
          "references": {
            "ViewerOptions": {
              "location": "import",
              "path": "../../interfaces/interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The photoviewer options"
        }
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The photoviewer mode (\"gallery\",\"slider\",\"one\")"
        },
        "attribute": "pvmode",
        "reflect": true
      },
      "startFrom": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The photoviewer image index for mode (\"slider\",\"one\")"
        },
        "attribute": "pvstartfrom",
        "reflect": true
      }
    };
  }
  static get states() {
    return {
      "innerImageList": {},
      "innerOptions": {},
      "innerMode": {},
      "innerStartFrom": {},
      "showHScroll": {},
      "close": {}
    };
  }
  static get events() {
    return [{
        "method": "onPhotoViewerResult",
        "name": "jeepPhotoViewerResult",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when successful or when an error occurs or a message to be sent"
        },
        "complexType": {
          "original": "JeepPhotoViewerResult",
          "resolved": "JeepPhotoViewerResult",
          "references": {
            "JeepPhotoViewerResult": {
              "location": "import",
              "path": "../../interfaces/interfaces"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "init": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Method initialize",
          "tags": []
        }
      },
      "closePhotoHScroll": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "imageList",
        "methodName": "parseImageList"
      }, {
        "propName": "options",
        "methodName": "parseOptions"
      }, {
        "propName": "mode",
        "methodName": "parseMode"
      }, {
        "propName": "startFrom",
        "methodName": "parseStartFrom"
      }];
  }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "handleWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "jeepPhotoHscrollClose",
        "method": "handleJeepPhotoHscrollClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoButtonsClose",
        "method": "handleJeepPhotoButtonsClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoHscrollResult",
        "method": "handleJeepPhotoHscrollResult",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
