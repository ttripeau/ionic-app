import { h, Host } from '@stencil/core';
export class JeepPhotoHscroll {
  constructor() {
    this._tapped = false;
    this._tappedTime = null;
    this._tapNum = 0;
    this._timerStart = false;
    this._photoZoomOneTap = false;
    this._ticking = false;
    this._isScrollListener = false;
    this._shareUrl = "";
    this._shareTitle = "";
    this._shareText = "";
    this.position = undefined;
    this.imageList = undefined;
    this.options = undefined;
    this.mode = undefined;
    this.innerImageList = undefined;
    this.innerOptions = undefined;
    this.innerPosition = undefined;
    this.innerMode = undefined;
    this.buttonsVisibility = undefined;
    this.isFullscreen = undefined;
    this.photoZoom = undefined;
    this.share = undefined;
    this.shareShow = false;
    this.titleShow = true;
    this.maxZoomScale = undefined;
    this.currentIndex = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parsePosition(newValue) {
    this.innerPosition = newValue;
  }
  parseImageList(newValue) {
    this.innerImageList = newValue;
  }
  parseOptions(newValue) {
    this.innerOptions = newValue;
  }
  parseMode(newValue) {
    this.innerMode = newValue;
  }
  async handleWindowResize() {
    this._currentPosition = this.currentIndex * this._window.innerWidth;
    await this._scrollToPosition(this.currentIndex);
  }
  async handleJeepPhotoButtonsClose() {
    if (this.isFullscreen) {
      await this._fullscreenExit();
    }
    if (this.innerMode !== 'gallery') {
      this.currentIndex = this.innerMode === 'slider' ? this._getCurrentPhotoIndex() : this.innerPosition;
      this.onPhotoHscrollResult.emit({ result: true, imageIndex: this.currentIndex });
    }
  }
  async handleJeepPhotoButtonsShare() {
    this.shareShow = true;
    this._shareUrl = this.innerImageList[this.currentIndex].url;
    this._shareTitle = this.innerImageList[this.currentIndex].title;
    this._shareText = "Share API Demo";
  }
  async handleJeepPhotoShareCompleted(event) {
    if (event.detail) {
      if (event.detail.result) {
        this.onPhotoHscrollResult.emit({ result: true,
          message: "Photo has been shared successfully" });
      }
      else {
        this.onPhotoHscrollResult.emit({ result: false,
          message: `Error: ${event.detail.message}` });
      }
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: No message returned" });
    }
    this.shareShow = false;
  }
  async handleJeepPhotoFullscreenRequest() {
    await this._fullscreenRequest(document.documentElement);
  }
  async handleJeepPhotoMinimizeRequest() {
    const index = this._getCurrentPhotoIndex();
    await this._fullscreenExit();
    this.currentIndex = index;
  }
  async handleJeepPhotoZoomOneTap() {
    this.photoZoom = false;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    this._photoZoomOneTap = true;
    this.buttonsVisibility = !this.buttonsVisibility;
  }
  async handleJeepPhotoSwipe(event) {
    if (event.detail) {
      if (!this.photoZoom) {
        let direction = event.detail;
        if (direction.up || direction.down) {
          if (this.isFullscreen) {
            await this._fullscreenExit();
          }
          if (this.innerMode !== 'gallery') {
            this.currentIndex = this.innerMode === 'slider' ? this._getCurrentPhotoIndex() : this.innerPosition;
            this.onPhotoHscrollResult.emit({ result: true, imageIndex: this.currentIndex });
          }
          else {
            this.onPhotoPhotoHscrollClose.emit();
          }
        }
      }
    }
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Carousel.
   */
  setCarousel() {
    return Promise.resolve(this._setCarousel());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setCarousel();
  }
  async componentDidRender() {
    if (this._photoZoomOneTap) {
      await this.setCarousel();
      this._photoZoomOneTap = false;
    }
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseImageList(this.imageList ? this.imageList : null);
    this.parseOptions(this.options ? this.options : null);
    this.parseMode(this.mode ? this.mode : "one");
    this.parsePosition(this.position >= 0 ? this.position : 0);
    this.buttonsVisibility = true;
    this.isFullscreen = false;
    this.photoZoom = false;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    this.share = "visible";
    this.share = this.innerOptions != null
      && Object.keys(this.innerOptions).includes("share")
      ? this.innerOptions.share ? "visible" : "hidden"
      : "visible";
    this.titleShow = this.innerOptions != null
      && Object.keys(this.innerOptions).includes("title")
      ? this.innerOptions.title : true;
    this.maxZoomScale = this.innerOptions != null && this.innerOptions.maxzoomscale
      ? this.innerOptions.maxzoomscale : 3.0;
    this.currentIndex = this.innerPosition;
    this._widthFullscreen = this._window.innerWidth;
    return;
  }
  async _setCarousel() {
    this._carouselEl = this._element.querySelector(`.carousel`);
    await this._scrollToPosition(this.currentIndex);
    this._currentPosition = this.currentIndex * this._window.innerWidth;
    this._previousScrollWidth = this._carouselEl.scrollWidth;
    this._carouselEl.classList.remove('hidden');
    if (!this._isScrollListener) {
      this._isScrollListener = true;
      this._carouselEl.addEventListener('scroll', () => {
        if (!this._ticking) {
          setTimeout(async () => {
            if (this._carouselEl.scrollWidth === this._previousScrollWidth) {
              const index = this._getCurrentPhotoIndex();
              if (index !== this.currentIndex) {
                this.currentIndex = index;
              }
            }
            this._ticking = false;
          }, 500);
          this._ticking = true;
        }
      }, false);
    }
    return;
  }
  async _scrollToPosition(index) {
    this._currentPosition = index * this._window.innerWidth;
    if (this._carouselEl)
      this._carouselEl.scrollTo(this._currentPosition, 0);
    return;
  }
  _getCurrentPhotoIndex() {
    let index = 0;
    this._currentPosition = Number(this._carouselEl.scrollLeft);
    if (Math.abs(this._carouselEl.scrollWidth / this.innerImageList.length - this._window.innerWidth) <= 2) {
      // slide constant width
      index = Math.round(this._currentPosition / this._window.innerWidth);
    }
    return index;
  }
  async _fullscreenRequest(elem) {
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    }
    else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    }
    else if (elem.mozRequestFullScreen) {
      elem.mozRequestFullScreen();
    }
    else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: Fullscreen API is not supported." });
    }
    this.isFullscreen = true;
    return;
  }
  async _fullscreenExit() {
    let doc = document;
    if (doc && doc.exitFullscreen) {
      doc.exitFullscreen();
    }
    else if (doc && doc.webkitExitFullscreen) {
      doc.webkitExitFullscreen();
    }
    else if (doc && doc.mozExitFullscreen) {
      doc.mozExitFullscreen();
    }
    else if (doc && doc.msExitFullscreen) {
      doc.msExitFullscreen();
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: Fullscreen API is not supported." });
    }
    this.isFullscreen = false;
    return;
  }
  _handleClick() {
    if (this.innerMode === "gallery" || this.innerMode === "slider") {
      this.currentIndex = this._getCurrentPhotoIndex();
      this._currentPosition = this.currentIndex * this._window.innerWidth;
    }
    else {
      this.currentIndex = this.innerPosition;
    }
    this.buttonsVisibility = !this.buttonsVisibility;
    // launch the zoom in out
    this.photoZoom = true;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRenderImg = [];
    if (this.innerImageList != null && this.innerImageList.length > 0) {
      const classTitle = this.titleShow ? "carousel-title" : "carousel-title hidden";
      if (this.innerMode === "gallery" || this.innerMode === "slider") {
        for (var i = 0; i < this.innerImageList.length; i++) {
          toRenderImg = [...toRenderImg, h("div", { class: "carousel-item", onClick: () => this._handleClick() }, h("img", { src: this.innerImageList[i].url, alt: this.innerImageList[i].title, class: "carousel-image" }), h("p", { class: classTitle }, this.innerImageList[i].title))
          ];
        }
      }
      if (this.innerMode === "one") {
        toRenderImg = [...toRenderImg, h("div", { class: "carousel-item", onClick: () => this._handleClick() }, h("img", { src: this.innerImageList[this.innerPosition].url, alt: this.innerImageList[this.innerPosition].title, class: "carousel-image" }), h("p", { class: classTitle }, this.innerImageList[this.innerPosition].title))
        ];
      }
    }
    //    const closeMode: string = this.innerImageList.length === 1 ? "no" : "yes";
    let toRender = [];
    if (this.buttonsVisibility) {
      const mode = this.isFullscreen ? "fullscreen" : "normal";
      toRender = [...toRender, h("jeep-photo-buttons", { share: this.share, viewmode: mode, closebutton: "yes", fromcomponent: "jeep-photo-hscroll" })
      ];
    }
    let toRenderShare = [];
    if (this.shareShow) {
      toRenderShare = [...toRenderShare, h("jeep-photo-share", { surl: this._shareUrl, stitle: this._shareTitle, stext: this._shareText })
      ];
    }
    return (h(Host, null, h("div", { class: "hscroll-container" }, h("div", { class: "wrapper" }, this.photoZoom
      ?
        h("jeep-photo-zoom", { url: this.innerImageList[this.currentIndex].url, maxzoomscale: this.maxZoomScale })
      :
        h("div", null, h("jeep-photo-swipe", null, h("div", { class: "carousel hidden" }, toRenderImg)), toRender, toRenderShare)))));
  }
  static get is() { return "jeep-photo-hscroll"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["jeep-photo-hscroll.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["jeep-photo-hscroll.css"]
    };
  }
  static get properties() {
    return {
      "position": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The selected position"
        },
        "attribute": "selposition",
        "reflect": true
      },
      "imageList": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Image[]",
          "resolved": "Image[]",
          "references": {
            "Image": {
              "location": "import",
              "path": "../../../interfaces/interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The Image List"
        }
      },
      "options": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ViewerOptions",
          "resolved": "ViewerOptions",
          "references": {
            "ViewerOptions": {
              "location": "import",
              "path": "../../../interfaces/interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The photoviewer options"
        }
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The photoviewer mode ('gallery':'one':'slider')"
        },
        "attribute": "pvmode",
        "reflect": true
      }
    };
  }
  static get states() {
    return {
      "innerImageList": {},
      "innerOptions": {},
      "innerPosition": {},
      "innerMode": {},
      "buttonsVisibility": {},
      "isFullscreen": {},
      "photoZoom": {},
      "share": {},
      "shareShow": {},
      "titleShow": {},
      "maxZoomScale": {},
      "currentIndex": {}
    };
  }
  static get events() {
    return [{
        "method": "onPhotoHscrollResult",
        "name": "jeepPhotoHscrollResult",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when successful or when an error occurs or a message has to be sent"
        },
        "complexType": {
          "original": "JeepPhotoViewerResult",
          "resolved": "JeepPhotoViewerResult",
          "references": {
            "JeepPhotoViewerResult": {
              "location": "import",
              "path": "../../../interfaces/interfaces"
            }
          }
        }
      }, {
        "method": "onPhotoZoom",
        "name": "jeepPhotoZoom",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the zoom is active or not"
        },
        "complexType": {
          "original": "{isZoom: boolean}",
          "resolved": "{ isZoom: boolean; }",
          "references": {}
        }
      }, {
        "method": "onPhotoPhotoHscrollClose",
        "name": "jeepPhotoHscrollClose",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when swipe gestures in Gallery mode"
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "init": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Method initialize",
          "tags": []
        }
      },
      "setCarousel": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Set the Carousel.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "position",
        "methodName": "parsePosition"
      }, {
        "propName": "imageList",
        "methodName": "parseImageList"
      }, {
        "propName": "options",
        "methodName": "parseOptions"
      }, {
        "propName": "mode",
        "methodName": "parseMode"
      }];
  }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "handleWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "jeepPhotoButtonsClose",
        "method": "handleJeepPhotoButtonsClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoButtonsShare",
        "method": "handleJeepPhotoButtonsShare",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoShareCompleted",
        "method": "handleJeepPhotoShareCompleted",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoRequestFullscreen",
        "method": "handleJeepPhotoFullscreenRequest",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoRequestMinimize",
        "method": "handleJeepPhotoMinimizeRequest",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoZoomOneTap",
        "method": "handleJeepPhotoZoomOneTap",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "jeepPhotoSwipe",
        "method": "handleJeepPhotoSwipe",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
