import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const jeepPhotoZoomCss = ":host{display:block;--zoom-background-color:var(--photoviewer-background-color);--zoom-width:100vw;--zoom-height:100vh;--zoom-offset-x:0px;--zoom-offset-y:0px;--zoom-top:0px;--zoom-left:0px;--zoom-transform:scale(1) translateX(0px) translateY(0px)}.zoom-container{position:absolute;top:0;bottom:0;right:0;left:0;background-color:var(--zoom-background-color)}.wrapper{padding:0;margin:0;position:relative;width:100%;height:100%}.zoom-item{margin:0;padding:0;width:100vw;height:100vh;position:relative}.zoom-image{position:absolute;offset:var(--zoom-offset-x) var(--zoom-offset-y);top:var(--zoom-top);left:var(--zoom-left);width:var(--zoom-width);height:var(--zoom-height);transform:var(--zoom-transform)}";

const JeepPhotoZoom = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoZoomOneTap = createEvent(this, "jeepPhotoZoomOneTap", 7);
    this._tapedTwice = false;
    this._tapedTime = null;
    this._tapNum = 0;
    this._timerStart = false;
    this._imageNatural = {};
    this._view = {};
    this._imageInView = {};
    this._curPan = {};
    this._startPoint = {};
    this._movePoint = {};
    this._centerPoint = {};
    this._lastPoint = {};
    this._doubleTouch = false;
    this._touchStart = false;
    this._touchMove = false;
    this.url = undefined;
    this.maxzoomscale = 3;
    this.innerUrl = undefined;
    this.innerMaxZoomScale = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseUrl(newValue) {
    this.innerUrl = newValue;
  }
  parseMaxZooScale(newValue) {
    this.innerMaxZoomScale = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Photo.
   */
  setPhoto() {
    return Promise.resolve(this._setPhoto());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setPhoto();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseUrl(this.url ? this.url : null);
    this.parseMaxZooScale(this.maxzoomscale ? this.maxzoomscale : 3);
    this._curZoomScale = 1.0;
    this._curPan = { x: 0, y: 0 };
    this._lastPoint = { x: this._window.innerWidth / 2, y: this._window.innerHeight / 2 };
    return;
  }
  async _setPhoto() {
    this._photoEl = this._element.querySelector('.zoom-item');
    // Define Listeners
    this._photoEl.addEventListener("touchstart", this._startHandler.bind(this));
    this._photoEl.addEventListener("touchmove", this._moveHandler.bind(this));
    this._photoEl.addEventListener("touchend", this._endHandler.bind(this));
    this._photoEl.addEventListener('mousedown', this._startHandler.bind(this));
    this._photoEl.addEventListener('mousemove', this._moveHandler.bind(this));
    this._photoEl.addEventListener('mouseup', this._endHandler.bind(this));
    await this.setImage();
    this._imageEl = this._photoEl.querySelector('.zoom-image');
    // View Size
    this._view = { left: 0, top: 0, width: this._window.innerWidth,
      height: this._window.innerHeight };
    // Image Natural Size
    this._imageNatural = { left: 0, top: 0, width: this._imageEl.naturalWidth,
      height: this._imageEl.naturalHeight };
    // Image in View
    this._imageInView = this._calculateImageInView();
    // Set the maximum scale
    this._maxZoomScale = this._calculateMaxZooScale();
    // Set host properties
    this._setHostProperties(this._curZoomScale, this._curPan);
    // Set the lastPoint to the View center
    this._lastPoint.x = this._imageInView.width / 2;
    this._lastPoint.y = this._imageInView.height / 2;
    return;
  }
  async setImage() {
    return new Promise((resolve) => {
      var img = new Image();
      img.onload = () => {
        this._photoEl.append(img);
        resolve();
      };
      img.src = this.innerUrl;
      img.className = 'zoom-image';
    });
  }
  _setHostProperties(scale, pan) {
    const transform = `scale(${scale}) translateX(${pan.x}px) translateY(${pan.y}px)`;
    this.el.style.setProperty('--zoom-left', `${this._imageInView.left}px`);
    this.el.style.setProperty('--zoom-top', `${this._imageInView.top}px`);
    this.el.style.setProperty('--zoom-width', `${this._imageInView.width}px`);
    this.el.style.setProperty('--zoom-height', `${this._imageInView.height}px`);
    this.el.style.setProperty('--zoom-transform', `${transform}`);
  }
  _calculateImageInView() {
    let imageRect = {};
    const scale = Math.max(this._imageNatural.width / this._view.width, this._imageNatural.height / this._view.height);
    imageRect.width = this._imageNatural.width / scale;
    imageRect.height = this._imageNatural.height / scale;
    imageRect.left = Math.max(0, (this._view.width - imageRect.width) / 2);
    imageRect.top = Math.max(0, (this._view.height - imageRect.height) / 2);
    return imageRect;
  }
  _calculateMaxZooScale() {
    return Math.max(this.innerMaxZoomScale, Math.max(this._view.width / this._imageInView.width, this._view.height / this._imageInView.height));
  }
  _getTouchPoint(event) {
    let point = {};
    if (event.targetTouches) {
      // Touch Events
      point.x = event.targetTouches[0].clientX;
      point.y = event.targetTouches[0].clientY;
    }
    else {
      // Mouse event
      point.x = event.clientX;
      point.y = event.clientY;
    }
    return point;
  }
  //******************************
  //* Handling Gesture Events    *
  //******************************
  _startHandler(event) {
    event.preventDefault();
    this._startPoint = this._getTouchPoint(event);
    if (!this._tapedTwice) {
      this._tapedTwice = true;
      this._tapedTime = setTimeout(() => {
        this._touchStart = true;
        this._tapNum = 1;
        this._endHandler();
      }, 300);
      return false;
    }
    //action on double tap goes below
    this._tapNum = 2;
    this._lastPoint = { x: this._startPoint.x, y: this._startPoint.y };
    clearTimeout(this._tapedTime);
    this._touchStart = true;
  }
  _moveHandler(event) {
    if (this._tapedTwice) {
      this._movePoint = this._getTouchPoint(event);
      this._touchMove = true;
      const deltaPoint = { x: this._lastPoint.x - this._movePoint.x,
        y: this._lastPoint.y - this._movePoint.y };
      this._curPan.x += deltaPoint.x * (this._maxZoomScale - 1) / this._maxZoomScale;
      this._curPan.y += deltaPoint.y * (this._maxZoomScale - 1) / this._maxZoomScale;
      this._lastPoint = this._movePoint;
      this._setHostProperties(this._maxZoomScale, this._curPan);
      this._touchStart = false;
    }
  }
  _endHandler() {
    if (this._touchStart && this._tapNum > 0) {
      if (this._tapNum === 2) {
        if (!this._touchMove) {
          this._handleDoubleTap(this._startPoint);
        }
        else {
          this._tapNum = 0;
          this._tapedTwice = false;
          this._touchStart = false;
          this._touchMove = false;
          this._curZoomScale = 1;
          this._curPan = { x: 0, y: 0 };
          this._setHostProperties(this._curZoomScale, this._curPan);
        }
      }
      else if (this._tapNum === 1) {
        this._curZoomScale = 1;
        this._handleSingleTap();
        this._tapNum = 0;
        this._tapedTwice = false;
        this._touchStart = false;
      }
    }
  }
  _handleSingleTap() {
    this.onPhotoZoomOneTap.emit();
  }
  _handleDoubleTap(pt) {
    if (this._curZoomScale === 1) {
      this._curZoomScale = this._maxZoomScale;
      this._curPan.x = (this._view.width / 2 - pt.x) * (this._curZoomScale - 1) / this._curZoomScale;
      this._curPan.y = (this._view.height / 2 - pt.y) * (this._curZoomScale - 1) / this._curZoomScale;
      this._setHostProperties(this._curZoomScale, this._curPan);
    }
    else {
      this._curZoomScale = 1;
      this._curPan = { x: 0, y: 0 };
      this._setHostProperties(this._curZoomScale, this._curPan);
    }
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    return (h(Host, null, h("div", { class: "zoom-container" }, h("div", { class: "wrapper" }, h("div", { class: "zoom-item" })))));
  }
  get el() { return this; }
  static get watchers() { return {
    "url": ["parseUrl"],
    "maxzoomscale": ["parseMaxZooScale"]
  }; }
  static get style() { return jeepPhotoZoomCss; }
}, [1, "jeep-photo-zoom", {
    "url": [513],
    "maxzoomscale": [514],
    "innerUrl": [32],
    "innerMaxZoomScale": [32],
    "init": [64],
    "setPhoto": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["jeep-photo-zoom"];
  components.forEach(tagName => { switch (tagName) {
    case "jeep-photo-zoom":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, JeepPhotoZoom);
      }
      break;
  } });
}

export { JeepPhotoZoom as J, defineCustomElement as d };
