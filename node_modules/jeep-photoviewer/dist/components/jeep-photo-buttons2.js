import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const btoa = (b) => window.btoa(b);
const shareSVG = "<svg xmlns='http://www.w3.org/2000/svg'  viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-share-2'><circle cx='18' cy='5' r='3'></circle><circle cx='6' cy='12' r='3'></circle><circle cx='18' cy='19' r='3'></circle><line x1='8.59' y1='13.51' x2='15.42' y2='17.49'></line><line x1='15.41' y1='6.51' x2='8.59' y2='10.49'></line></svg>";
const closeSVG = "<svg xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-x'><line x1='18' y1='6' x2='6' y2='18'></line><line x1='6' y1='6' x2='18' y2='18'></line></svg>";
const minimizeSVG = "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-minimize'><path d='M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3'></path></svg>";
const fullscreenSVG = "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='#fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-maximize'><path d='M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3'></path></svg>";
const placeholderSVG = `<svg id='No_Image' data-name='No_Image' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 240 240'>
<rect x='50' y='70' width='140' height='140' rx='20' ry='20' fill='#3700B3' mask='url(#hole)'/>
<mask id='hole'>
    <rect x='50' y='70' width='140' height='140'  rx='20' ry='20' fill='#b49393'/>
    <path d='M70 190,H170,L135 100,L110 150,L92.5 130 z' stroke='red' fill='#3700B3'></path>
</mask>
</svg>
`;
const shareUrl = "url('data:image/svg+xml;base64," + btoa(shareSVG) + "')";
const closeUrl = "url('data:image/svg+xml;base64," + btoa(closeSVG) + "')";
const minimizeUrl = "url('data:image/svg+xml;base64," + btoa(minimizeSVG) + "')";
const fullscreenUrl = "url('data:image/svg+xml;base64," + btoa(fullscreenSVG) + "')";
const placeholderUrl = "url('data:image/svg+xml;base64," + btoa(placeholderSVG) + "')";

const jeepPhotoButtonsCss = ":host{display:block;--photo-buttons-height:min(7vmin, 40px);--photo-buttons-padding:3px}.photobuttons-container{position:absolute;top:5vh;left:0;width:100vw;height:var(--photo-buttons-height);background-color:rgba(125,125,125,0.3);visibility:visible}.wrapper{width:100%;height:100%}.share-button{position:absolute;top:0;left:7vmin;width:var(--photo-buttons-height);height:var(--photo-buttons-height);background-position:center;background-repeat:no-repeat;background-size:cover}.mode-button{position:absolute;top:0;left:calc(100vw / 2 - var(--photo-buttons-height) / 2);width:var(--photo-buttons-height);height:var(--photo-buttons-height);background-position:center;background-repeat:no-repeat;background-size:cover}.close-button{position:absolute;top:0;left:calc(100vw - var(--photo-buttons-height) - 7vmin);width:var(--photo-buttons-height);height:var(--photo-buttons-height);background-position:center;background-repeat:no-repeat;background-size:cover}.hidden{visibility:hidden}";

const JeepPhotoButtons = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoButtonsClose = createEvent(this, "jeepPhotoButtonsClose", 7);
    this.onPhotoRequestFullscreen = createEvent(this, "jeepPhotoRequestFullscreen", 7);
    this.onPhotoRequestMinimize = createEvent(this, "jeepPhotoRequestMinimize", 7);
    this.onPhotoButtonsShare = createEvent(this, "jeepPhotoButtonsShare", 7);
    this.share = undefined;
    this.viewmode = undefined;
    this.closebutton = undefined;
    this.fromcomponent = undefined;
    this.innerShare = undefined;
    this.innerViewmode = undefined;
    this.innerCloseButton = undefined;
    this.innerFromComponent = undefined;
    this.visible = undefined;
    this.mode = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseShare(newValue) {
    this.innerShare = newValue;
  }
  parseViewmode(newValue) {
    this.innerViewmode = newValue;
  }
  parseCloseButton(newValue) {
    this.innerCloseButton = newValue;
  }
  parseFromComponent(newValue) {
    this.innerFromComponent = newValue;
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Photo Buttons.
   */
  setPhotoButtons() {
    return Promise.resolve(this._setPhotoButtons());
  }
  /**
   * Set the Navigation Visibility (visible/hidden)
   */
  setJeepPhotoButtonsVisibility(state) {
    if (state) {
      this._photoButtonsEl.classList.remove('hidden');
      this.visible = true;
    }
    else {
      this._photoButtonsEl.classList.add('hidden');
      this.visible = false;
    }
    return;
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setPhotoButtons();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseShare(this.share ? this.share : "visible");
    this.parseViewmode(this.viewmode ? this.viewmode : "normal");
    this.parseCloseButton(this.closebutton ? this.closebutton : "yes");
    this.parseFromComponent(this.fromcomponent ? this.fromcomponent : "jeep-photoviewer");
    if (this.innerViewmode === "fullscreen") {
      this.mode = "minimize";
      this._modeUrl = minimizeUrl;
    }
    else {
      this.mode = "fullscreen";
      this._modeUrl = fullscreenUrl;
    }
    return;
  }
  async _setPhotoButtons() {
    this._photoButtonsEl = this._element.querySelector('.photobuttons-container');
    if (this.innerShare === "visible" &&
      this.innerFromComponent === "jeep-photo-hscroll") {
      this._shareEl = this._photoButtonsEl.querySelector('.share-button');
      this._shareEl.style.setProperty("background-image", `${shareUrl}`);
    }
    if (this.innerFromComponent === "jeep-photo-hscroll") {
      this._modeEl = this._photoButtonsEl.querySelector('.mode-button');
      this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
    }
    if (this.innerCloseButton === "yes") {
      this._closeEl = this._photoButtonsEl.querySelector('.close-button');
      this._closeEl.style.setProperty("background-image", `${closeUrl}`);
    }
    return;
  }
  _handleClick(button) {
    switch (button) {
      case "share": {
        this.onPhotoButtonsShare.emit();
        break;
      }
      case "close": {
        this.onPhotoButtonsClose.emit({ component: this.innerFromComponent });
        break;
      }
      case "mode": {
        if (this.mode === "fullscreen") {
          this._modeUrl = minimizeUrl;
          this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
          this.onPhotoRequestFullscreen.emit();
          this.mode = "minimize";
        }
        else {
          this._modeUrl = fullscreenUrl;
          this._modeEl.style.setProperty("background-image", `${this._modeUrl}`);
          this.onPhotoRequestMinimize.emit();
          this.mode = "fullscreen";
        }
        break;
      }
    }
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRender = [];
    if (this.innerShare === "visible" &&
      this.innerFromComponent === "jeep-photo-hscroll") {
      toRender = [...toRender, h("div", { class: "share-button", onClick: () => this._handleClick("share") })
      ];
    }
    if (this.innerFromComponent === "jeep-photo-hscroll")
      toRender = [...toRender, h("div", { class: "mode-button", onClick: () => this._handleClick("mode") })
      ];
    if (this.innerCloseButton === "yes") {
      toRender = [...toRender, h("div", { class: "close-button", onClick: () => this._handleClick("close") })
      ];
    }
    return (h(Host, null, h("div", { class: "photobuttons-container" }, h("div", { class: "wrapper" }, toRender))));
  }
  get el() { return this; }
  static get watchers() { return {
    "share": ["parseShare"],
    "viewmode": ["parseViewmode"],
    "closebutton": ["parseCloseButton"],
    "fromcomponent": ["parseFromComponent"]
  }; }
  static get style() { return jeepPhotoButtonsCss; }
}, [1, "jeep-photo-buttons", {
    "share": [513, "sharevisible"],
    "viewmode": [513],
    "closebutton": [513],
    "fromcomponent": [513],
    "innerShare": [32],
    "innerViewmode": [32],
    "innerCloseButton": [32],
    "innerFromComponent": [32],
    "visible": [32],
    "mode": [32],
    "init": [64],
    "setPhotoButtons": [64],
    "setJeepPhotoButtonsVisibility": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["jeep-photo-buttons"];
  components.forEach(tagName => { switch (tagName) {
    case "jeep-photo-buttons":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, JeepPhotoButtons);
      }
      break;
  } });
}

export { JeepPhotoButtons as J, defineCustomElement as d, placeholderUrl as p };
