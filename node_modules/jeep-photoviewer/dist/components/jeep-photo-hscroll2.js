import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$4 } from './jeep-photo-buttons2.js';
import { d as defineCustomElement$3 } from './jeep-photo-share2.js';
import { d as defineCustomElement$2 } from './jeep-photo-swipe2.js';
import { d as defineCustomElement$1 } from './jeep-photo-zoom2.js';

const jeepPhotoHscrollCss = ":host{display:block;--hscroll-background-color:var(--photoviewer-background-color);--hscroll-title-color:#d3d3d3}.hscroll-container{position:absolute;top:0;bottom:0;right:0;left:0;overflow-y:hidden;background-color:var(--hscroll-background-color)}.wrapper{box-sizing:border-box;padding:0;margin:0;position:relative;width:100%;height:100%}.carousel{box-sizing:border-box;margin:0;padding:0;width:100vw;height:100vh;scroll-snap-type:x mandatory;display:flex;-ms-scroll-snap-type:x mandatory;-webkit-scroll-snap-type:x mandatory;-webkit-scroll-snap-destination:0% 0%;-webkit-overflow-scrolling:touch;overflow-x:scroll;-ms-overflow-style:none;visibility:visible}.carousel::-webkit-scrollbar{display:none}.carousel-item{border-right:1px solid white;padding:0;min-width:100vw;min-height:100vh;scroll-snap-align:start;text-align:center;position:relative}.carousel-image{width:100vw;height:100vh;object-fit:contain}.carousel-title{position:absolute;bottom:0;visibility:visible;width:100vw;height:3vh;color:var(--hscroll-title-color);font:2.5vh Arial, sans-serif}.hidden{visibility:hidden}";

const JeepPhotoHscroll = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoHscrollResult = createEvent(this, "jeepPhotoHscrollResult", 7);
    this.onPhotoZoom = createEvent(this, "jeepPhotoZoom", 7);
    this.onPhotoPhotoHscrollClose = createEvent(this, "jeepPhotoHscrollClose", 7);
    this._tapped = false;
    this._tappedTime = null;
    this._tapNum = 0;
    this._timerStart = false;
    this._photoZoomOneTap = false;
    this._ticking = false;
    this._isScrollListener = false;
    this._shareUrl = "";
    this._shareTitle = "";
    this._shareText = "";
    this.position = undefined;
    this.imageList = undefined;
    this.options = undefined;
    this.mode = undefined;
    this.innerImageList = undefined;
    this.innerOptions = undefined;
    this.innerPosition = undefined;
    this.innerMode = undefined;
    this.buttonsVisibility = undefined;
    this.isFullscreen = undefined;
    this.photoZoom = undefined;
    this.share = undefined;
    this.shareShow = false;
    this.titleShow = true;
    this.maxZoomScale = undefined;
    this.currentIndex = undefined;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parsePosition(newValue) {
    this.innerPosition = newValue;
  }
  parseImageList(newValue) {
    this.innerImageList = newValue;
  }
  parseOptions(newValue) {
    this.innerOptions = newValue;
  }
  parseMode(newValue) {
    this.innerMode = newValue;
  }
  async handleWindowResize() {
    this._currentPosition = this.currentIndex * this._window.innerWidth;
    await this._scrollToPosition(this.currentIndex);
  }
  async handleJeepPhotoButtonsClose() {
    if (this.isFullscreen) {
      await this._fullscreenExit();
    }
    if (this.innerMode !== 'gallery') {
      this.currentIndex = this.innerMode === 'slider' ? this._getCurrentPhotoIndex() : this.innerPosition;
      this.onPhotoHscrollResult.emit({ result: true, imageIndex: this.currentIndex });
    }
  }
  async handleJeepPhotoButtonsShare() {
    this.shareShow = true;
    this._shareUrl = this.innerImageList[this.currentIndex].url;
    this._shareTitle = this.innerImageList[this.currentIndex].title;
    this._shareText = "Share API Demo";
  }
  async handleJeepPhotoShareCompleted(event) {
    if (event.detail) {
      if (event.detail.result) {
        this.onPhotoHscrollResult.emit({ result: true,
          message: "Photo has been shared successfully" });
      }
      else {
        this.onPhotoHscrollResult.emit({ result: false,
          message: `Error: ${event.detail.message}` });
      }
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: No message returned" });
    }
    this.shareShow = false;
  }
  async handleJeepPhotoFullscreenRequest() {
    await this._fullscreenRequest(document.documentElement);
  }
  async handleJeepPhotoMinimizeRequest() {
    const index = this._getCurrentPhotoIndex();
    await this._fullscreenExit();
    this.currentIndex = index;
  }
  async handleJeepPhotoZoomOneTap() {
    this.photoZoom = false;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    this._photoZoomOneTap = true;
    this.buttonsVisibility = !this.buttonsVisibility;
  }
  async handleJeepPhotoSwipe(event) {
    if (event.detail) {
      if (!this.photoZoom) {
        let direction = event.detail;
        if (direction.up || direction.down) {
          if (this.isFullscreen) {
            await this._fullscreenExit();
          }
          if (this.innerMode !== 'gallery') {
            this.currentIndex = this.innerMode === 'slider' ? this._getCurrentPhotoIndex() : this.innerPosition;
            this.onPhotoHscrollResult.emit({ result: true, imageIndex: this.currentIndex });
          }
          else {
            this.onPhotoPhotoHscrollClose.emit();
          }
        }
      }
    }
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  /**
   * Set the Carousel.
   */
  setCarousel() {
    return Promise.resolve(this._setCarousel());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  async componentDidLoad() {
    await this.setCarousel();
  }
  async componentDidRender() {
    if (this._photoZoomOneTap) {
      await this.setCarousel();
      this._photoZoomOneTap = false;
    }
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseImageList(this.imageList ? this.imageList : null);
    this.parseOptions(this.options ? this.options : null);
    this.parseMode(this.mode ? this.mode : "one");
    this.parsePosition(this.position >= 0 ? this.position : 0);
    this.buttonsVisibility = true;
    this.isFullscreen = false;
    this.photoZoom = false;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    this.share = "visible";
    this.share = this.innerOptions != null
      && Object.keys(this.innerOptions).includes("share")
      ? this.innerOptions.share ? "visible" : "hidden"
      : "visible";
    this.titleShow = this.innerOptions != null
      && Object.keys(this.innerOptions).includes("title")
      ? this.innerOptions.title : true;
    this.maxZoomScale = this.innerOptions != null && this.innerOptions.maxzoomscale
      ? this.innerOptions.maxzoomscale : 3.0;
    this.currentIndex = this.innerPosition;
    this._widthFullscreen = this._window.innerWidth;
    return;
  }
  async _setCarousel() {
    this._carouselEl = this._element.querySelector(`.carousel`);
    await this._scrollToPosition(this.currentIndex);
    this._currentPosition = this.currentIndex * this._window.innerWidth;
    this._previousScrollWidth = this._carouselEl.scrollWidth;
    this._carouselEl.classList.remove('hidden');
    if (!this._isScrollListener) {
      this._isScrollListener = true;
      this._carouselEl.addEventListener('scroll', () => {
        if (!this._ticking) {
          setTimeout(async () => {
            if (this._carouselEl.scrollWidth === this._previousScrollWidth) {
              const index = this._getCurrentPhotoIndex();
              if (index !== this.currentIndex) {
                this.currentIndex = index;
              }
            }
            this._ticking = false;
          }, 500);
          this._ticking = true;
        }
      }, false);
    }
    return;
  }
  async _scrollToPosition(index) {
    this._currentPosition = index * this._window.innerWidth;
    if (this._carouselEl)
      this._carouselEl.scrollTo(this._currentPosition, 0);
    return;
  }
  _getCurrentPhotoIndex() {
    let index = 0;
    this._currentPosition = Number(this._carouselEl.scrollLeft);
    if (Math.abs(this._carouselEl.scrollWidth / this.innerImageList.length - this._window.innerWidth) <= 2) {
      // slide constant width
      index = Math.round(this._currentPosition / this._window.innerWidth);
    }
    return index;
  }
  async _fullscreenRequest(elem) {
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    }
    else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    }
    else if (elem.mozRequestFullScreen) {
      elem.mozRequestFullScreen();
    }
    else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: Fullscreen API is not supported." });
    }
    this.isFullscreen = true;
    return;
  }
  async _fullscreenExit() {
    let doc = document;
    if (doc && doc.exitFullscreen) {
      doc.exitFullscreen();
    }
    else if (doc && doc.webkitExitFullscreen) {
      doc.webkitExitFullscreen();
    }
    else if (doc && doc.mozExitFullscreen) {
      doc.mozExitFullscreen();
    }
    else if (doc && doc.msExitFullscreen) {
      doc.msExitFullscreen();
    }
    else {
      this.onPhotoHscrollResult.emit({ result: false,
        message: "Error: Fullscreen API is not supported." });
    }
    this.isFullscreen = false;
    return;
  }
  _handleClick() {
    if (this.innerMode === "gallery" || this.innerMode === "slider") {
      this.currentIndex = this._getCurrentPhotoIndex();
      this._currentPosition = this.currentIndex * this._window.innerWidth;
    }
    else {
      this.currentIndex = this.innerPosition;
    }
    this.buttonsVisibility = !this.buttonsVisibility;
    // launch the zoom in out
    this.photoZoom = true;
    this.onPhotoZoom.emit({ isZoom: this.photoZoom });
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRenderImg = [];
    if (this.innerImageList != null && this.innerImageList.length > 0) {
      const classTitle = this.titleShow ? "carousel-title" : "carousel-title hidden";
      if (this.innerMode === "gallery" || this.innerMode === "slider") {
        for (var i = 0; i < this.innerImageList.length; i++) {
          toRenderImg = [...toRenderImg, h("div", { class: "carousel-item", onClick: () => this._handleClick() }, h("img", { src: this.innerImageList[i].url, alt: this.innerImageList[i].title, class: "carousel-image" }), h("p", { class: classTitle }, this.innerImageList[i].title))
          ];
        }
      }
      if (this.innerMode === "one") {
        toRenderImg = [...toRenderImg, h("div", { class: "carousel-item", onClick: () => this._handleClick() }, h("img", { src: this.innerImageList[this.innerPosition].url, alt: this.innerImageList[this.innerPosition].title, class: "carousel-image" }), h("p", { class: classTitle }, this.innerImageList[this.innerPosition].title))
        ];
      }
    }
    //    const closeMode: string = this.innerImageList.length === 1 ? "no" : "yes";
    let toRender = [];
    if (this.buttonsVisibility) {
      const mode = this.isFullscreen ? "fullscreen" : "normal";
      toRender = [...toRender, h("jeep-photo-buttons", { share: this.share, viewmode: mode, closebutton: "yes", fromcomponent: "jeep-photo-hscroll" })
      ];
    }
    let toRenderShare = [];
    if (this.shareShow) {
      toRenderShare = [...toRenderShare, h("jeep-photo-share", { surl: this._shareUrl, stitle: this._shareTitle, stext: this._shareText })
      ];
    }
    return (h(Host, null, h("div", { class: "hscroll-container" }, h("div", { class: "wrapper" }, this.photoZoom
      ?
        h("jeep-photo-zoom", { url: this.innerImageList[this.currentIndex].url, maxzoomscale: this.maxZoomScale })
      :
        h("div", null, h("jeep-photo-swipe", null, h("div", { class: "carousel hidden" }, toRenderImg)), toRender, toRenderShare)))));
  }
  get el() { return this; }
  static get watchers() { return {
    "position": ["parsePosition"],
    "imageList": ["parseImageList"],
    "options": ["parseOptions"],
    "mode": ["parseMode"]
  }; }
  static get style() { return jeepPhotoHscrollCss; }
}, [1, "jeep-photo-hscroll", {
    "position": [514, "selposition"],
    "imageList": [16],
    "options": [16],
    "mode": [513, "pvmode"],
    "innerImageList": [32],
    "innerOptions": [32],
    "innerPosition": [32],
    "innerMode": [32],
    "buttonsVisibility": [32],
    "isFullscreen": [32],
    "photoZoom": [32],
    "share": [32],
    "shareShow": [32],
    "titleShow": [32],
    "maxZoomScale": [32],
    "currentIndex": [32],
    "init": [64],
    "setCarousel": [64]
  }, [[9, "resize", "handleWindowResize"], [0, "jeepPhotoButtonsClose", "handleJeepPhotoButtonsClose"], [0, "jeepPhotoButtonsShare", "handleJeepPhotoButtonsShare"], [0, "jeepPhotoShareCompleted", "handleJeepPhotoShareCompleted"], [0, "jeepPhotoRequestFullscreen", "handleJeepPhotoFullscreenRequest"], [0, "jeepPhotoRequestMinimize", "handleJeepPhotoMinimizeRequest"], [0, "jeepPhotoZoomOneTap", "handleJeepPhotoZoomOneTap"], [0, "jeepPhotoSwipe", "handleJeepPhotoSwipe"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["jeep-photo-hscroll", "jeep-photo-buttons", "jeep-photo-share", "jeep-photo-swipe", "jeep-photo-zoom"];
  components.forEach(tagName => { switch (tagName) {
    case "jeep-photo-hscroll":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, JeepPhotoHscroll);
      }
      break;
    case "jeep-photo-buttons":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "jeep-photo-share":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "jeep-photo-swipe":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "jeep-photo-zoom":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { JeepPhotoHscroll as J, defineCustomElement as d };
