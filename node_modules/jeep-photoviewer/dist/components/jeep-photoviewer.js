import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$6, p as placeholderUrl } from './jeep-photo-buttons2.js';
import { d as defineCustomElement$5 } from './jeep-photo-hscroll2.js';
import { d as defineCustomElement$4 } from './jeep-photo-share2.js';
import { d as defineCustomElement$3 } from './jeep-photo-swipe2.js';
import { d as defineCustomElement$2 } from './jeep-photo-zoom2.js';

const jeepPhotoviewerCss = ":host{display:block;--gallery-box-width:33.33vw;--gallery-template-columns:auto auto auto;--photoviewer-background-color:black}.photoviewer-container::-webkit-scrollbar{display:none}.photoviewer-container{-ms-autohiding-scrollbar:none;scrollbar-width:0}.wrapper{position:absolute;top:0;left:0;display:grid;width:100vw;grid-template-columns:var(--gallery-template-columns);grid-row-gap:2px;column-gap:2px;background-color:var(--photoviewer-background-color)}.placeholder{width:var(--gallery-box-width);height:var(--gallery-box-width);line-height:var(--gallery-box-width);text-align:center;background-position:center;background-repeat:no-repeat;background-size:cover;background-color:#bdbbbb}.image{width:100%;background-position:center;background-repeat:no-repeat;background-size:cover;background-color:#fffff0}";

const JeepPhotoviewer$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onPhotoViewerResult = createEvent(this, "jeepPhotoViewerResult", 7);
    //**********************************
    //* Internal Variables Declaration *
    //**********************************
    this._isScale = false;
    this._backRange = ["white", "ivory", "lightgrey", "darkgrey",
      "dimgrey", "grey", "black"];
    this.imageList = undefined;
    this.options = undefined;
    this.mode = undefined;
    this.startFrom = undefined;
    this.innerImageList = undefined;
    this.innerOptions = undefined;
    this.innerMode = undefined;
    this.innerStartFrom = undefined;
    this.showHScroll = false;
    this.close = false;
  }
  //*****************************
  //* Watch on Property Changes *
  //*****************************
  parseImageList(newValue) {
    this.innerImageList = newValue;
  }
  parseOptions(newValue) {
    this.innerOptions = newValue;
  }
  parseMode(newValue) {
    const expMode = ["one", "gallery", "slider"];
    const val = expMode.includes(newValue) ? newValue : "one";
    this.innerMode = val;
  }
  parseStartFrom(newValue) {
    const val = newValue < 0 || newValue > this.innerImageList.length ? 0 : newValue;
    this.innerStartFrom = val;
  }
  //*******************************
  //* Listen to Event Definitions *
  //*******************************
  handleWindowResize() {
    this._windowResize();
  }
  async handleJeepPhotoHscrollClose() {
    if (this.innerMode === "gallery") {
      this.close = false;
      await this.closePhotoHScroll();
    }
  }
  async handleJeepPhotoButtonsClose(event) {
    if (this.innerMode === "gallery") {
      if (event.detail.component === "jeep-photo-hscroll") {
        this.close = false;
        await this.closePhotoHScroll();
      }
      else {
        this.close = true;
        this.onPhotoViewerResult.emit({ result: true });
      }
    }
    if (this.innerMode === "one" || this.innerMode === "slider") {
      this.close = true;
    }
  }
  handleJeepPhotoHscrollResult(event) {
    if (event.detail) {
      this.onPhotoViewerResult.emit(event.detail);
    }
  }
  //**********************
  //* Method Definitions *
  //**********************
  /**
   * Method initialize
   */
  async init() {
    return await this._init();
  }
  closePhotoHScroll() {
    return Promise.resolve(this._closeHScroll());
  }
  //*******************************
  //* Component Lifecycle Methods *
  //*******************************
  async componentWillLoad() {
    this._window = window;
    await this.init();
  }
  //******************************
  //* Private Method Definitions *
  //******************************
  async _init() {
    this._element = this.el.shadowRoot;
    this.parseImageList(this.imageList ? this.imageList : null);
    this.parseOptions(this.options ? this.options : null);
    this.parseMode(this.mode ? this.mode : "one");
    let stFrom = 0;
    if (this.startFrom != null) {
      stFrom = this.startFrom > this.imageList.length - 1 ? this.imageList.length - 1
        : this.startFrom;
    }
    this.parseStartFrom(stFrom);
    this._setProperties();
    return;
  }
  async _windowResize() {
    this._setProperties();
  }
  _setProperties() {
    if (this.innerImageList == null || this.innerImageList.length == 0) {
      this.onPhotoViewerResult.emit({ result: false,
        message: "You must provide an image or an image array" });
    }
    if ((this.innerMode === "gallery" || this.innerMode === "slider")
      && this.innerImageList.length <= 1) {
      this.onPhotoViewerResult.emit({ result: false,
        message: `Image array should be greater than one for mode : ${this.innerMode}` });
    }
    if (this.innerMode === "gallery") {
      var spanCount = this.options != null && this.options.spancount
        ? this.options.spancount : 3;
      if (this._window.innerWidth > this._window.innerHeight)
        spanCount += 1;
    }
    else if (this.innerMode === "slider") {
      spanCount = 1;
      this._selPos = this.innerStartFrom;
      this.showHScroll = true;
    }
    else if (this.innerMode === "one") {
      spanCount = 1;
      this._selPos = this.innerImageList.length > 1 ? this.innerStartFrom : 0;
      this.showHScroll = true;
    }
    else {
      this.onPhotoViewerResult.emit({ result: false,
        message: "mode must be in ['one', 'gallery', 'slider']" });
    }
    const boxWidth = (100 / spanCount).toFixed(4);
    var tempColumns = ``;
    for (let i = 0; i < spanCount; i++) {
      tempColumns += `auto `;
    }
    tempColumns = tempColumns.substring(0, tempColumns.length - 1);
    var backColor = this.options != null &&
      this._backRange.includes(this.options.backgroundcolor)
      ? this.options.backgroundcolor : "black";
    this.el.style.setProperty('--gallery-box-width', `${boxWidth}vw`);
    this.el.style.setProperty('--gallery-template-columns', `${tempColumns}`);
    this.el.style.setProperty('--photoviewer-background-color', `${backColor}`);
  }
  _handleClick(boxId) {
    this._selPos = Number(boxId.substr(boxId.lastIndexOf("-") + 1));
    this.showHScroll = true;
  }
  async _closeHScroll() {
    this.showHScroll = false;
    return;
  }
  //*************************
  //* Rendering JSX Element *
  //*************************
  render() {
    let toRender = [];
    if (this.innerImageList != null && this.innerImageList.length > 0) {
      for (var i = 0; i < this.innerImageList.length; i++) {
        const placeHolderStyle = { "background-image": `${placeholderUrl}` };
        const elStyle = { "background-image": `url(${this.innerImageList[i].url})` };
        const boxId = `gallery-box-${i}`;
        if (this.innerMode === "gallery") {
          toRender = [...toRender, h("div", { class: "placeholder", style: placeHolderStyle }, h("div", { id: boxId, class: "image", onClick: () => this._handleClick(boxId), style: elStyle }, h("img", null)))
          ];
        }
        else {
          toRender = [...toRender, h("div", { class: "placeholder", style: placeHolderStyle }, h("div", { id: boxId, class: "image", style: elStyle }, h("img", null)))
          ];
        }
      }
    }
    return (h(Host, null, !this.close
      ?
        h("div", { class: "photoviewer-container" }, this.showHScroll
          ?
            h("jeep-photo-hscroll", { position: this._selPos, imageList: this.innerImageList, options: this.innerOptions, mode: this.innerMode })
          :
            h("div", { class: "wrapper" }, toRender, h("jeep-photo-buttons", { share: "false", viewmode: "normal", closebutton: "yes", fromcomponent: "jeep-photoviewer" })))
      :
        null));
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return this; }
  static get watchers() { return {
    "imageList": ["parseImageList"],
    "options": ["parseOptions"],
    "mode": ["parseMode"],
    "startFrom": ["parseStartFrom"]
  }; }
  static get style() { return jeepPhotoviewerCss; }
}, [1, "jeep-photoviewer", {
    "imageList": [16],
    "options": [16],
    "mode": [513, "pvmode"],
    "startFrom": [514, "pvstartfrom"],
    "innerImageList": [32],
    "innerOptions": [32],
    "innerMode": [32],
    "innerStartFrom": [32],
    "showHScroll": [32],
    "close": [32],
    "init": [64],
    "closePhotoHScroll": [64]
  }, [[9, "resize", "handleWindowResize"], [0, "jeepPhotoHscrollClose", "handleJeepPhotoHscrollClose"], [0, "jeepPhotoButtonsClose", "handleJeepPhotoButtonsClose"], [0, "jeepPhotoHscrollResult", "handleJeepPhotoHscrollResult"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["jeep-photoviewer", "jeep-photo-buttons", "jeep-photo-hscroll", "jeep-photo-share", "jeep-photo-swipe", "jeep-photo-zoom"];
  components.forEach(tagName => { switch (tagName) {
    case "jeep-photoviewer":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, JeepPhotoviewer$1);
      }
      break;
    case "jeep-photo-buttons":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "jeep-photo-hscroll":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "jeep-photo-share":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "jeep-photo-swipe":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "jeep-photo-zoom":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const JeepPhotoviewer = JeepPhotoviewer$1;
const defineCustomElement = defineCustomElement$1;

export { JeepPhotoviewer, defineCustomElement };
