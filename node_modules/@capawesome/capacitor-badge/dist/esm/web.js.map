{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAU5C,MAAM,OAAO,QAAS,SAAQ,SAAS;IAGrC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,kBAAkB;QAC7B,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,OAAwB;QACvC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,MAAM,SAAS,CAAC,aAAa,EAAE,CAAC;SACjC;aAAM;YACL,MAAM,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACpC;QACD,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/B,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;QACnC,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;QACnC,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,OAAO;SACR;QACD,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,aAAa,IAAI,SAAS;SACxC,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,OAAO;QACnB,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACzD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO;SACR;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAClC,MAAM,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;;AA/Dc,oBAAW,GAAG,iBAAiB,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  BadgePlugin,\n  GetBadgeResult,\n  IsSupportedResult,\n  PermissionStatus,\n  SetBadgeOptions,\n} from './definitions';\n\nexport class BadgeWeb extends WebPlugin implements BadgePlugin {\n  private static STORAGE_KEY = 'capacitor.badge';\n\n  constructor() {\n    super();\n    this.restore();\n  }\n\n  public async checkPermissions(): Promise<PermissionStatus> {\n    return { display: 'granted' };\n  }\n\n  public async requestPermissions(): Promise<PermissionStatus> {\n    return { display: 'granted' };\n  }\n\n  public async get(): Promise<GetBadgeResult> {\n    const value = localStorage.getItem(BadgeWeb.STORAGE_KEY);\n    const count = value ? parseInt(value, 10) : 0;\n    return { count };\n  }\n\n  public async set(options: SetBadgeOptions): Promise<void> {\n    const count = options.count;\n    if (count === 0) {\n      await navigator.clearAppBadge();\n    } else {\n      await navigator.setAppBadge(count);\n    }\n    const value = count.toString();\n    localStorage.setItem(BadgeWeb.STORAGE_KEY, value);\n  }\n\n  public async increase(): Promise<void> {\n    const { count } = await this.get();\n    await this.set({ count: count + 1 });\n  }\n\n  public async decrease(): Promise<void> {\n    const { count } = await this.get();\n    if (count < 1) {\n      return;\n    }\n    await this.set({ count: count - 1 });\n  }\n\n  public async clear(): Promise<void> {\n    await this.set({ count: 0 });\n  }\n\n  public async isSupported(): Promise<IsSupportedResult> {\n    const result = {\n      isSupported: 'setAppBadge' in navigator,\n    };\n    return result;\n  }\n\n  private async restore(): Promise<void> {\n    const value = localStorage.getItem(BadgeWeb.STORAGE_KEY);\n    if (!value) {\n      return;\n    }\n    const count = parseInt(value, 10);\n    await navigator.setAppBadge(count);\n  }\n}\n\ndeclare global {\n  interface Navigator {\n    setAppBadge: (count: number) => Promise<void>;\n    clearAppBadge: () => Promise<void>;\n  }\n}\n"]}