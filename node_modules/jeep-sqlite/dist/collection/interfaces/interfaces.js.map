{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface EchoOptions {\r\n  /**\r\n   *  String to be echoed\r\n   */\r\n  value?: string;\r\n}\r\nexport interface ConnectionOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * The database  version\r\n   */\r\n  version?: number;\r\n  /**\r\n   * Set to true (database encryption) / false\r\n   */\r\n  encrypted?: boolean;\r\n  /**\r\n   * Set the mode for database encryption\r\n   * [\"encryption\", \"secret\", \"newsecret\"]\r\n   */\r\n  mode?: string;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n\r\n}\r\nexport interface AllConnectionsOptions {\r\n  /**\r\n   * the dbName of all connections\r\n   */\r\n  dbNames?: string[];\r\n  /**\r\n   * the openMode (\"RW\" read&write, \"RO\" readonly) of all connections\r\n   */\r\n\r\n  openModes?: string[];\r\n}\r\nexport interface SQLiteOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\nexport interface SQLiteExecuteOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * The batch of raw SQL statements as string\r\n   */\r\n  statements?: string;\r\n  /**\r\n   * Enable / Disable transactions\r\n   * default Enable (true)\r\n   */\r\n  transaction?: boolean;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n\r\n}\r\nexport interface SQLiteSetOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * The batch of raw SQL statements as Array of capSQLLiteSet\r\n   */\r\n  set?: SQLiteSet[];\r\n  /**\r\n   * Enable / Disable transactions\r\n   * default Enable (true)\r\n   */\r\n  transaction?: boolean;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\nexport interface SQLiteRunOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * A statement\r\n   */\r\n  statement?: string;\r\n  /**\r\n   * A set of values for a statement\r\n   */\r\n  values?: any[];\r\n  /**\r\n   * Enable / Disable transactions\r\n   * default Enable (true)\r\n   */\r\n  transaction?: boolean;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\nexport interface SQLiteQueryOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * A statement\r\n   */\r\n  statement?: string;\r\n  /**\r\n   * A set of values for a statement\r\n   */\r\n  values?: any[];\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\nexport interface SQLiteSyncDateOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * Set the synchronization date\r\n   * Format yyyy-MM-dd'T'HH:mm:ss.SSSZ\r\n   */\r\n  syncdate?: string;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\nexport interface SQLiteTableOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * The table name\r\n   */\r\n  table?: string;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\n\r\nexport interface SQLiteImportOptions {\r\n  /**\r\n   * Set the JSON object to import\r\n   *\r\n   */\r\n  jsonstring?: string;\r\n}\r\nexport interface SQLiteExportOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * Set the mode to export JSON Object:\r\n   * \"full\" or \"partial\"\r\n   *\r\n   */\r\n  jsonexportmode?: string;\r\n  /**\r\n   * Set to true (database in read-only mode) / false\r\n   */\r\n  readonly?: boolean;\r\n}\r\nexport interface SQLiteUpgradeOptions {\r\n  /**\r\n   * The database name\r\n   */\r\n  database?: string;\r\n  /**\r\n   * The upgrade options for version upgrade\r\n   * Array of length 1 to easiest the iOS plugin\r\n   */\r\n  upgrade?: SQLiteVersionUpgrade[];\r\n}\r\nexport interface SQLiteVersionUpgrade {\r\n  toVersion: number;\r\n  statements: string[];\r\n}\r\n\r\nexport interface SQLiteSet {\r\n  /**\r\n   * A statement\r\n   */\r\n  statement?: string;\r\n  /**\r\n   * the data values list as an Array\r\n   */\r\n  values?: any[];\r\n}\r\nexport interface SQLiteHTTPOptions {\r\n  /**\r\n   * The url\r\n   */\r\n  url?: string;\r\n  /**\r\n   * the overwrite value true/false default true\r\n   */\r\n  overwrite?: boolean;\r\n}\r\nexport interface SQLiteLocalDiskOptions {\r\n  /**\r\n   * the overwrite value true/false default true\r\n   */\r\n  overwrite?: boolean;\r\n}\r\nexport interface EchoResult {\r\n  /**\r\n   * String returned\r\n   */\r\n  value?: string;\r\n}\r\nexport interface SQLiteResult {\r\n  /**\r\n   * result set to true when successful else false\r\n   */\r\n  result?: boolean;\r\n}\r\nexport interface SQLiteVersion {\r\n  /**\r\n   * the returned database version\r\n   */\r\n  version?: number;\r\n}\r\n\r\nexport interface SQLiteChanges {\r\n  /**\r\n   * a returned Changes\r\n   */\r\n  changes?: Changes;\r\n}\r\nexport interface Changes {\r\n  /**\r\n   * the number of changes from an execute or run command\r\n   */\r\n  changes?: number;\r\n  /**\r\n   * the lastId created from a run command\r\n   */\r\n  lastId?: number;\r\n}\r\nexport interface SQLiteValues {\r\n  /**\r\n   * the data values list as an Array\r\n   */\r\n  values?: any[];\r\n}\r\nexport interface SQLiteSyncDate {\r\n  /**\r\n   * the synchronization date\r\n   */\r\n  syncDate?: number;\r\n}\r\nexport interface  SQLiteFromAssetsOptions {\r\n  /**\r\n   * the overwrite value true/false default true\r\n   */\r\n  overwrite?: boolean;\r\n}\r\nexport interface SQLiteJson {\r\n  /**\r\n   * an export JSON object\r\n   */\r\n  export?: JsonSQLite;\r\n}\r\n/* JSON Types */\r\nexport interface JsonSQLite {\r\n  /**\r\n   * The database name\r\n   */\r\n  database: string;\r\n  /**\r\n   *  The database version\r\n   */\r\n  version: number;\r\n  /**\r\n   * Delete the database prior to import (default false)\r\n   */\r\n  overwrite?: boolean;\r\n   /**\r\n   * Set to true (database encryption) / false\r\n   */\r\n  encrypted: boolean;\r\n  /***\r\n   * Set the mode\r\n   * [\"full\", \"partial\"]\r\n   */\r\n  mode: string;\r\n  /***\r\n   * Array of Table (JsonTable)\r\n   */\r\n  tables: JsonTable[];\r\n  /***\r\n   * Array of View (JsonView)\r\n   */\r\n  views?: JsonView[];\r\n  }\r\nexport interface JsonTable {\r\n  /**\r\n   * The database name\r\n   */\r\n  name: string;\r\n  /***\r\n   * Array of Schema (JsonColumn)\r\n   */\r\n  schema?: JsonColumn[];\r\n  /***\r\n   * Array of Index (JsonIndex)\r\n   */\r\n  indexes?: JsonIndex[];\r\n  /***\r\n   * Array of Trigger (JsonTrigger)\r\n   */\r\n  triggers?: JsonTrigger[];\r\n  /***\r\n   * Array of Table data\r\n   */\r\n  values?: any[][];\r\n}\r\nexport interface JsonColumn {\r\n  /**\r\n   * The column name\r\n   */\r\n  column?: string;\r\n  /**\r\n   * The column data (type, unique, ...)\r\n   */\r\n  value: string;\r\n  /**\r\n   * The column foreign key constraints\r\n   */\r\n  foreignkey?: string;\r\n   /**\r\n   * the column constraint\r\n   */\r\n  constraint?: string;\r\n}\r\nexport interface JsonTrigger {\r\n  /**\r\n   * The trigger name\r\n   */\r\n  name: string;\r\n  /**\r\n   * The trigger time event fired\r\n   */\r\n  timeevent: string;\r\n\r\n  /**\r\n   * The trigger condition\r\n   */\r\n  condition?: string;\r\n\r\n  /**\r\n   * The logic of the trigger\r\n   */\r\n  logic: string;\r\n}\r\nexport interface JsonIndex {\r\n  /**\r\n   * The index name\r\n   */\r\n  name: string;\r\n  /**\r\n   * The value of the index can have the following formats:\r\n   * email\r\n   * email ASC\r\n   * email, MobileNumber\r\n   * email ASC, MobileNumber DESC\r\n   */\r\n  value: string;\r\n  /**\r\n   * the mode (Optional)\r\n   * UNIQUE\r\n   */\r\n  mode?: string;\r\n}\r\nexport interface JsonProgressListener {\r\n  /**\r\n   * Progress message\r\n   */\r\n  progress?: string;\r\n}\r\nexport interface HTTPRequestEndedListener {\r\n  /**\r\n   * Message\r\n   */\r\n  message?: string;\r\n}\r\nexport interface PickOrSaveDatabaseEndedListener {\r\n  /**\r\n   * Pick Database's name\r\n   */\r\n  db_name?: string;\r\n  /**\r\n   * Message\r\n   */\r\n  message?: string;\r\n}\r\nexport interface ButtonOptions {\r\n  top?: string;\r\n  right?: string;\r\n  color?: string;\r\n  backgroundColor?: string;\r\n  fontSize?: string;\r\n  padding?: string;\r\n}\r\n\r\nexport interface JsonView {\r\n  /**\r\n   * The view name\r\n   */\r\n  name: string;\r\n  /**\r\n   * The view statement\r\n   */\r\n  value: string;\r\n}\r\n"]}