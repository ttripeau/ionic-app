import { setForeignKeyConstraintsEnabled, dbChanges, execute, beginTransaction, commitTransaction, rollbackTransaction, setVersion } from '../utils/utils-sqlite';
export const onUpgrade = async (mDb, vUpgDict, curVersion, targetVersion) => {
  let changes = -1;
  const sortedKeys = new Int32Array(Object.keys(vUpgDict)
    .map(item => parseInt(item)))
    .sort();
  for (const versionKey of sortedKeys) {
    if (versionKey > curVersion && versionKey <= targetVersion) {
      const statements = vUpgDict[versionKey].statements;
      if (statements.length === 0) {
        return Promise.reject('onUpgrade: statements not given');
      }
      try {
        // set Foreign Keys Off
        await setForeignKeyConstraintsEnabled(mDb, false);
        const initChanges = await dbChanges(mDb);
        await executeStatementsProcess(mDb, statements);
        await setVersion(mDb, versionKey);
        // set Foreign Keys On
        await setForeignKeyConstraintsEnabled(mDb, true);
        changes = (await dbChanges(mDb)) - initChanges;
      }
      catch (err) {
        return Promise.reject(new Error(`onUpgrade: ${err.message}`));
      }
    }
  }
  return Promise.resolve(changes);
};
export const executeStatementsProcess = async (mDb, statements) => {
  try {
    await beginTransaction(mDb, true);
    for (const statement of statements) {
      await execute(mDb, statement, false);
    }
    await commitTransaction(mDb, true);
    return Promise.resolve();
  }
  catch (err) {
    await rollbackTransaction(mDb, true);
    return Promise.reject(`ExecuteStatementProcess: ${err}`);
  }
};
//# sourceMappingURL=utils-upgrade.js.map
