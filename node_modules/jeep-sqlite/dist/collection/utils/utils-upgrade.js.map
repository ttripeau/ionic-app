{"version":3,"file":"utils-upgrade.js","sourceRoot":"","sources":["../../src/utils/utils-upgrade.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,+BAA+B,EAAE,SAAS,EAAE,OAAO,EAAE,gBAAgB,EACrE,iBAAiB,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAE3F,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAC5B,GAAQ,EACR,QAA8C,EAC9C,UAAkB,EAClB,aAAqB,EACJ,EAAE;EACnB,IAAI,OAAO,GAAW,CAAC,CAAC,CAAC;EACzB,MAAM,UAAU,GAAe,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;KAClE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KAC5B,IAAI,EAAE,CAAC;EAER,KAAK,MAAM,UAAU,IAAI,UAAU,EAAE;IACnC,IAAI,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,aAAa,EAAE;MAC1D,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC;MACnD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;OAC1D;MACD,IAAI;QACF,uBAAuB;QACvB,MAAM,+BAA+B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAClD,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,wBAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAChD,MAAM,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAClC,sBAAsB;QACtB,MAAM,+BAA+B,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACjD,OAAO,GAAG,CAAC,MAAM,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;OAChD;MAAC,OAAO,GAAG,EAAE;QACZ,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;OAC/D;KACF;GACF;EAED,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,GAAQ,EAAE,UAAoB,EAAiB,EAAE;EAC9F,IAAI;IACF,MAAM,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAClC,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;MAClC,MAAM,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;KACtC;IACD,MAAM,iBAAiB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;GAC1B;EAAC,OAAO,GAAG,EAAE;IACZ,MAAM,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,OAAO,OAAO,CAAC,MAAM,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;GAC1D;AACH,CAAC,CAAA","sourcesContent":["import { SQLiteVersionUpgrade } from '../interfaces/interfaces';\r\nimport { setForeignKeyConstraintsEnabled, dbChanges, execute, beginTransaction,\r\n         commitTransaction, rollbackTransaction, setVersion } from '../utils/utils-sqlite';\r\n\r\nexport const onUpgrade = async (\r\n  mDb: any,\r\n  vUpgDict: Record<number, SQLiteVersionUpgrade>,\r\n  curVersion: number,\r\n  targetVersion: number\r\n): Promise<number> => {\r\n  let changes: number = -1;\r\n  const sortedKeys: Int32Array = new Int32Array(Object.keys(vUpgDict)\r\n  .map(item => parseInt(item)))\r\n  .sort();\r\n\r\n  for (const versionKey of sortedKeys) {\r\n    if (versionKey > curVersion && versionKey <= targetVersion) {\r\n      const statements = vUpgDict[versionKey].statements;\r\n      if (statements.length === 0) {\r\n        return Promise.reject('onUpgrade: statements not given');\r\n      }\r\n      try {\r\n        // set Foreign Keys Off\r\n        await setForeignKeyConstraintsEnabled(mDb, false);\r\n        const initChanges = await dbChanges(mDb);\r\n        await executeStatementsProcess(mDb, statements);\r\n        await setVersion(mDb, versionKey);\r\n        // set Foreign Keys On\r\n        await setForeignKeyConstraintsEnabled(mDb, true);\r\n        changes = (await dbChanges(mDb)) - initChanges;\r\n      } catch (err) {\r\n        return Promise.reject(new Error(`onUpgrade: ${err.message}`));\r\n      }\r\n    }\r\n  }\r\n\r\n  return Promise.resolve(changes);\r\n};\r\n\r\nexport const executeStatementsProcess = async (mDb: any, statements: string[]): Promise<void> => {\r\n  try {\r\n    await beginTransaction(mDb, true);\r\n    for (const statement of statements) {\r\n      await execute(mDb, statement, false);\r\n    }\r\n    await commitTransaction(mDb, true);\r\n    return Promise.resolve();\r\n  } catch (err) {\r\n    await rollbackTransaction(mDb, true);\r\n    return Promise.reject(`ExecuteStatementProcess: ${err}`);\r\n  }\r\n}\r\n"]}