{"version":3,"file":"database.js","sourceRoot":"","sources":["../../src/utils/database.ts"],"names":[],"mappings":"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","sourcesContent":["import initSqlJs from 'sql.js';\nimport { EventEmitter } from '@stencil/core';\n\nimport { SQLiteSet, JsonSQLite, SQLiteVersionUpgrade, JsonProgressListener} from '../interfaces/interfaces';\n\nimport { getDBFromStore, setInitialDBToStore, setDBToStore, copyDBToStore,\n         removeDBFromStore, isDBInStore, restoreDBFromStore } from './utils-store';\nimport { dbChanges, beginTransaction, rollbackTransaction, commitTransaction,\n         execute, executeSet, run, queryAll, isTableExists, getVersion, isSqlDeleted,\n         isLastModified, getTableList, setForeignKeyConstraintsEnabled } from './utils-sqlite';\nimport { createDatabaseSchema, createTablesData, createViews} from './utils-importJson';\nimport { isJsonSQLite } from './utils-json';\nimport { createExportObject, getSynchroDate, setLastExportDate, delExportedRows } from './utils-exportJson';\nimport { onUpgrade }  from './utils-upgrade';\n\nexport class Database {\n  private _isDBOpen: boolean;\n  private dbName: string;\n  private store: any;\n  private version: number;\n  private mDb: any;\n  private vUpgDict: Record<number, SQLiteVersionUpgrade> = {};\n  private autoSave: boolean = false;\n  private wasmPath: string = '/assets';\n  private isBackup: boolean = false;\n\n\n  constructor(databaseName: string, version: number,\n              upgDict: Record<number, SQLiteVersionUpgrade>,\n              store: LocalForage, autoSave: boolean, wasmPath: string) {\n    this.dbName = databaseName;\n    this.store = store;\n    this.version = version;\n    this.mDb = null;\n    this.vUpgDict = upgDict;\n    this._isDBOpen = false;\n    this.autoSave = autoSave;\n    this.wasmPath = wasmPath;\n  }\n  public async open(): Promise<void> {\n    const config ={\n      locateFile: (file: any) => `${this.wasmPath}/${file}`\n    }\n\n    return new Promise((resolve,reject) => {\n      try {\n        initSqlJs(config).then(async (SQL) => {\n          // retrieve the database if stored on localforage\n          const retDB: Uint8Array = await getDBFromStore(this.dbName, this.store);\n          if(retDB != null) {\n            // Open existing database\n            this.mDb = new SQL.Database(retDB);\n          } else {\n            // Create a new database\n            this.mDb = new SQL.Database();\n            await setInitialDBToStore( this.dbName, this.store);\n          }\n\n          this._isDBOpen = true;\n          // get the current version\n          let curVersion: number = await getVersion(this.mDb);\n          if (this.version > curVersion && (Object.keys(this.vUpgDict)).length > 0) {\n            try {\n              // copy the db\n              const isDB: boolean = await isDBInStore(this.dbName, this.store);\n              if (isDB) {\n                await copyDBToStore(this.dbName, `backup-${this.dbName}`, this.store);\n                this.isBackup = true;\n              }\n\n              // execute the upgrade flow process\n              const changes: number = await onUpgrade(\n                                      this.mDb,\n                                      this.vUpgDict,\n                                      curVersion,\n                                      this.version\n              );\n              if(changes === -1) {\n                // restore the database from backup\n                try {\n                  if(this.isBackup) {\n                    await restoreDBFromStore(this.dbName, 'backup',this.store);\n                  }\n                } catch (err) {\n                  return reject(new Error(`Open: ${err.message}`));\n                }\n              }\n              // delete the backup database\n              if(this.isBackup) {\n                await removeDBFromStore(`backup-${this.dbName}`,this.store);\n              }\n\n\n            } catch (err) {\n              // restore the database from backup\n              try {\n                if(this.isBackup) {\n                  await restoreDBFromStore(this.dbName, 'backup',this.store);\n                }\n              } catch (err) {\n                return reject(new Error(`Open: ${err.message}`));\n              }\n            }\n\n          }\n          if( this.autoSave ) {\n            try {\n              await this.saveToStore();\n            } catch (err) {\n              this._isDBOpen = false;\n              return reject(`Open: ${err}`);\n            }\n          }\n          // set Foreign Keys On\n          await setForeignKeyConstraintsEnabled(this.mDb, true);\n\n          return resolve();\n        });\n      } catch (err) {\n        this._isDBOpen = false;\n        return reject(`in open ${err}`);\n      }\n\n    });\n  }\n  public isDBOpen(): boolean {\n    return this._isDBOpen;\n  }\n  public async close(): Promise<void> {\n    if (this.mDb != null && this._isDBOpen) {\n      try {\n        // save the database to store\n        await this.saveToStore(false);\n        // close the database\n        this.mDb.close();\n        this._isDBOpen = false;\n\n\n      } catch (err) {\n        this._isDBOpen = false;\n        return Promise.reject(`in close ${err}`);\n      }\n    }\n    return Promise.resolve();\n  }\n  public async saveToStore(setFK:boolean = true): Promise<void> {\n    if (this.mDb != null && this._isDBOpen) {\n      try {\n        // save the database to store\n        await setDBToStore(this.mDb, this.dbName, this.store);\n        if(setFK) {\n          // set Foreign Keys On\n          await setForeignKeyConstraintsEnabled(this.mDb, true);\n        }\n      } catch (err) {\n        return Promise.reject(`in saveToStore ${err}`);\n      }\n    }\n    return Promise.resolve();\n  }\n  public async exportDB(): Promise<Uint8Array> {\n    // export the database\n    try {\n      const data: Uint8Array = this.mDb.export();\n      return data;\n    } catch (err) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`exportDB: ${msg}`);\n    }\n\n  }\n  public async getVersion(): Promise<number> {\n    if (this.mDb != null && this._isDBOpen) {\n      try {\n        // save the database to store\n        const curVersion: number = await getVersion(this.mDb)\n        return Promise.resolve(curVersion);\n      } catch (err) {\n        this._isDBOpen = false;\n        return Promise.reject(`in getVersion ${err}`);\n      }\n    }\n  }\n\n  public async isDBExists(database: string): Promise<boolean> {\n    try {\n      const isExists: boolean = await isDBInStore(database, this.store);\n      return Promise.resolve(isExists);\n    } catch (err) {\n      return Promise.reject(`in isDBExists ${err}`);\n    }\n  }\n  public async deleteDB(database: string): Promise<void> {\n    try {\n      // test if file exists\n      const isExists: boolean = await this.isDBExists(database);\n      if (isExists && !this._isDBOpen) {\n        // open the database\n          await this.open();\n      }\n      // close the database\n      await this.close();\n      // delete the database\n      if (isExists) {\n        await removeDBFromStore(database, this.store);\n      }\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(new Error(`DeleteDB: ${err.message}`));\n    }\n\n  }\n  public async executeSQL(sql: string, transaction: boolean = true): Promise<number> {\n    if (!this._isDBOpen) {\n      let msg = `ExecuteSQL: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    try {\n      if(transaction) await beginTransaction(this.mDb, this._isDBOpen);\n    } catch(err) {\n      let msg = `executeSQL: ${err.message}`;\n      return Promise.reject(new Error(`${msg}`));\n    }\n    try {\n      const changes = await execute(this.mDb, sql, false);\n      if (changes < 0) {\n        return Promise.reject(new Error('ExecuteSQL: changes < 0'));\n      }\n      if(transaction) await commitTransaction(this.mDb, this._isDBOpen);\n      if( this.autoSave ) {\n        try {\n          await this.saveToStore();\n            } catch (err) {\n          this._isDBOpen = false;\n          return Promise.reject(`ExecuteSQL: ${err}`);\n        }\n      }\n      return Promise.resolve(changes);\n    } catch (err) {\n      let msg = `ExecuteSQL: ${err.message}`;\n      try {\n        if(transaction) await rollbackTransaction(this.mDb, this._isDBOpen);\n      } catch (err) {\n        msg += ` : ${err.message}`;\n      }\n      return Promise.reject(new Error(`ExecuteSQL: ${msg}`));\n    }\n  }\n  public async execSet(set: SQLiteSet[], transaction: boolean = true): Promise<any> {\n    if (!this._isDBOpen) {\n      let msg = `ExecSet: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    const retRes: any = { changes: -1, lastId: -1 };\n    let initChanges = -1;\n    try {\n      initChanges = await dbChanges(this.mDb);\n      if(transaction) await beginTransaction(this.mDb, this._isDBOpen);\n    } catch(err) {\n      let msg = `ExecSet: ${err.message}`;\n      return Promise.reject(new Error(`${msg}`));\n    }\n    try {\n      const lastId = await executeSet(this.mDb, set, false);\n      if (lastId < 0) {\n        return Promise.reject(new Error('ExecSet: changes < 0'));\n      }\n      if(transaction) await commitTransaction(this.mDb, this._isDBOpen);\n      const changes = (await dbChanges(this.mDb)) - initChanges;\n      retRes.changes = changes;\n      retRes.lastId = lastId;\n      if( this.autoSave ) {\n        try {\n          await this.saveToStore();\n        } catch (err) {\n          this._isDBOpen = false;\n          return Promise.reject(`ExecSet: ${err}`);\n        }\n      }\n      return Promise.resolve(retRes);\n    } catch (err) {\n      let msg = `ExecSet: ${err.message}`;\n      try {\n        if(transaction) await rollbackTransaction(this.mDb, this._isDBOpen);\n      } catch (err) {\n        msg += ` : ${err.message}`;\n      }\n      return Promise.reject(new Error(`ExecSet: ${msg}`));\n    }\n  }\n  public async selectSQL(sql: string, values: string[]): Promise<any[]> {\n    if (!this._isDBOpen) {\n      let msg = `SelectSQL: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    try {\n      let retArr: any[] = await queryAll(this.mDb, sql, values);\n      return Promise.resolve(retArr);\n    } catch (err) {\n      return Promise.reject(new Error(`SelectSQL: ${err.message}`));\n    }\n  }\n  public async runSQL(statement: string, values: any[], transaction: boolean = true): Promise<any> {\n    let lastId = -1;\n    if (!this._isDBOpen) {\n      let msg = `RunSQL: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    const retRes: any = { changes: -1, lastId: -1 };\n    let initChanges = -1;\n    try {\n      initChanges = await dbChanges(this.mDb);\n\n      if(transaction) await beginTransaction(this.mDb, this._isDBOpen);\n    } catch(err) {\n      let msg = `RunSQL: ${err.message}`;\n      return Promise.reject(new Error(`${msg}`));\n    }\n    try {\n        lastId = await run(this.mDb, statement, values, false);\n\n      if (lastId < 0) {\n        return Promise.reject(new Error('RunSQL: lastId < 0'));\n      }\n      if(transaction) await commitTransaction(this.mDb, this._isDBOpen);\n      const changes = (await dbChanges(this.mDb)) - initChanges;\n      retRes.changes = changes;\n      retRes.lastId = lastId;\n      if( this.autoSave ) {\n        try {\n          await this.saveToStore();\n        } catch (err) {\n          this._isDBOpen = false;\n          return Promise.reject(`RunSQL: ${err}`);\n        }\n      }\n      return Promise.resolve(retRes);\n    } catch (err) {\n      let msg = `RunSQL: ${err.message}`;\n      try {\n        if(transaction) await rollbackTransaction(this.mDb, this._isDBOpen);\n      } catch (err) {\n        msg += ` : ${err.message}`;\n      }\n      return Promise.reject(new Error(`${msg}`));\n    }\n  }\n  async getTableNames(): Promise<any[]> {\n    if (!this._isDBOpen) {\n      let msg = `GetTableNames: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    try {\n      let retArr: any[] = await getTableList(this.mDb);\n      return Promise.resolve(retArr);\n    } catch (err) {\n      return Promise.reject(new Error(`GetTableNames: ${err.message}`));\n    }\n\n  }\n  async isTable(tableName: string): Promise<boolean> {\n    if (!this._isDBOpen) {\n      let msg = `isTable: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    try {\n      const retB = await isTableExists(this.mDb, tableName);\n      return Promise.resolve(retB);\n    } catch (err) {\n      const msg = `IsTable: ${err.message}`;\n      return Promise.reject(new Error(msg));\n    }\n  }\n  async createSyncTable(): Promise<number> {\n    if (!this._isDBOpen) {\n      let msg = `createSyncTable: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    let changes = -1;\n    try {\n      const retB = await isTableExists(this.mDb, 'sync_table');\n      if(!retB) {\n        const isLastMod = await isLastModified(this.mDb, this._isDBOpen);\n        const isDel = await isSqlDeleted(this.mDb, this._isDBOpen);\n        if(isLastMod && isDel) {\n          const date: number = Math.round(new Date().getTime() / 1000);\n          let stmts = `\n                          CREATE TABLE IF NOT EXISTS sync_table (\n                              id INTEGER PRIMARY KEY NOT NULL,\n                              sync_date INTEGER\n                              );`;\n          stmts += `INSERT INTO sync_table (sync_date) VALUES (\n                              \"${date}\");`;\n          changes = await execute(this.mDb, stmts, false);\n          return Promise.resolve(changes);\n        } else {\n          return Promise.reject(new Error('No last_modified/sql_deleted columns in tables'));\n        }\n      } else {\n        return Promise.resolve(0);\n      }\n    } catch (err) {\n      const msg = `CreateSyncTable: ${err.message}`;\n      return Promise.reject(new Error(msg));\n    }\n  }\n  async getSyncDate(): Promise<number> {\n    if (!this._isDBOpen) {\n      let msg = `getSyncDate: Database ${this.dbName} `;\n      msg += `not opened`;\n      return Promise.reject(new Error(msg));\n    }\n    try {\n      const isTable = await isTableExists(this.mDb, 'sync_table');\n      if(!isTable) {\n        return Promise.reject(new Error('No sync_table available'));\n      }\n      const res = await getSynchroDate(this.mDb);\n      return Promise.resolve(res);\n    } catch (err) {\n      const msg = `getSyncDate: ${err.message}`;\n      return Promise.reject(new Error(msg));\n    }\n  }\n  async setSyncDate(syncDate: string): Promise<any> {\n    if (!this._isDBOpen) {\n      let msg = `SetSyncDate: Database ${this.dbName} `;\n      msg += `not opened`;\n      return { result: false, message: msg };\n    }\n    try {\n      const isTable = await isTableExists(this.mDb, 'sync_table');\n      if(!isTable) {\n        return Promise.reject(new Error('No sync_table available'));\n      }\n      const sDate: number = Math.round(new Date(syncDate).getTime() / 1000);\n      let stmt = `UPDATE sync_table SET sync_date = `;\n      stmt += `${sDate} WHERE id = 1;`;\n      const changes: number = await execute(this.mDb, stmt, false);\n      if (changes < 0) {\n        return { result: false, message: 'setSyncDate failed' };\n      } else {\n        return { result: true };\n      }\n    } catch (err) {\n      return { result: false, message: `setSyncDate failed: ${err.message}` };\n    }\n  }\n  async importJson(jsonData: JsonSQLite, importProgress: EventEmitter<JsonProgressListener>): Promise<any> {\n    let changes = 0;\n    if (this._isDBOpen) {\n      try {\n        // set Foreign Keys Off\n        await setForeignKeyConstraintsEnabled(this.mDb, false);\n\n        if (jsonData.tables && jsonData.tables.length > 0) {\n\n          // create the database schema\n          changes = await createDatabaseSchema(this.mDb, jsonData);\n          let msg = `Schema creation completed changes: ${changes}`;\n          importProgress.emit({progress:msg});\n\n          if (changes != -1) {\n            // create the tables data\n            changes += await createTablesData(this.mDb, jsonData, importProgress);\n            let msg = `Tables data creation completed changes: ${changes}`;\n            importProgress.emit({progress:msg});\n          }\n        }\n        if (jsonData.views && jsonData.views.length > 0) {\n          // create the views\n          changes += await createViews(this.mDb, jsonData);\n        }\n        // set Foreign Keys On\n        await setForeignKeyConstraintsEnabled(this.mDb, true);\n\n        await this.saveToStore();\n\n        return Promise.resolve(changes);\n      } catch (err) {\n        return Promise.reject(new Error(`ImportJson: ${err.message}`));\n      }\n    } else {\n      return Promise.reject(new Error(`ImportJson: database is closed`));\n    }\n  }\n  async exportJson(mode: string, exportProgress: EventEmitter<JsonProgressListener>): Promise<any> {\n    const inJson: JsonSQLite = {} as JsonSQLite;\n    inJson.database = this.dbName.slice(0, -9);\n    inJson.version = this.version;\n    inJson.encrypted = false;\n    inJson.mode = mode;\n    if (this._isDBOpen) {\n      try {\n        const isTable = await isTableExists(this.mDb, 'sync_table');\n        if(isTable) {\n          await setLastExportDate(this.mDb, (new Date()).toISOString());\n        }\n        const retJson: JsonSQLite = await createExportObject(this.mDb, inJson, exportProgress);\n        const keys = Object.keys(retJson);\n        if(keys.length === 0) {\n          const msg = `ExportJson: return Object is empty `+\n                      `No data to synchronize`;\n          return Promise.reject(new Error(msg));\n        }\n        const isValid = isJsonSQLite(retJson);\n        if (isValid) {\n          return Promise.resolve(retJson);\n        } else {\n          return Promise.reject(new Error(`ExportJson: retJson not valid`));\n        }\n      } catch (err) {\n        return Promise.reject(new Error(`ExportJson: ${err.message}`));\n      }\n    } else {\n      return Promise.reject(new Error(`ExportJson: database is closed`));\n    }\n  }\n  async deleteExportedRows() : Promise<void> {\n    if (this._isDBOpen) {\n      try {\n        await delExportedRows(this.mDb);\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(new Error(`deleteExportedRows: ${err.message}`));\n      }\n    } else {\n      return Promise.reject(new Error(`deleteExportedRows: database is closed`));\n    }\n\n  }\n}\n"]}