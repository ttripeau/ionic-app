{"version":3,"file":"utils-sqlite.js","sourceRoot":"","sources":["../../src/utils/utils-sqlite.ts"],"names":[],"mappings":"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","sourcesContent":["import { getTablesNames } from '../utils/utils-drop';\r\nimport { getTableColumnNamesTypes } from '../utils/utils-json';\r\n\r\nexport const beginTransaction = async (db: any, isOpen: boolean): Promise<void> => {\r\n    const msg = 'BeginTransaction: ';\r\n    if (!isOpen) {\r\n      return Promise.reject(new Error(`${msg}database not opened`));\r\n    }\r\n    const sql = 'BEGIN TRANSACTION;';\r\n    try {\r\n      db.exec(sql);\r\n      return Promise.resolve();\r\n    } catch (err) {\r\n      return Promise.reject(new Error(`${msg}${err.message}`));\r\n    }\r\n}\r\nexport const rollbackTransaction = async (db: any, isOpen: boolean): Promise<void> => {\r\n    const msg = 'RollbackTransaction: ';\r\n    if (!isOpen) {\r\n      return Promise.reject(new Error(`${msg}database not opened`));\r\n    }\r\n    const sql = 'ROLLBACK TRANSACTION;';\r\n    try {\r\n      db.exec(sql);\r\n      return Promise.resolve();\r\n    } catch(err) {\r\n      return Promise.reject(new Error(`${msg}${err.message}`));\r\n    }\r\n}\r\nexport const commitTransaction = async (db: any, isOpen: boolean): Promise<void> => {\r\n    const msg = 'CommitTransaction: ';\r\n    if (!isOpen) {\r\n      return Promise.reject(new Error(`${msg}database not opened`));\r\n    }\r\n    const sql = 'COMMIT TRANSACTION;';\r\n    try {\r\n      db.exec(sql);\r\n      return Promise.resolve();\r\n    } catch(err) {\r\n      return Promise.reject(new Error(`${msg}${err.message}`));\r\n    }\r\n}\r\nexport const dbChanges = async (db: any): Promise<number> => {\r\n    const SELECT_CHANGE = 'SELECT total_changes()';\r\n    let changes: number = 0;\r\n    try {\r\n      const res = db.exec(SELECT_CHANGE);\r\n      // process the row here\r\n      changes = res[0].values[0][0];\r\n      return Promise.resolve(changes);\r\n    } catch (err) {\r\n      return Promise.reject(new Error(`DbChanges failed: ${err.message}`));\r\n    }\r\n}\r\nexport const getLastId = async (db: any): Promise<number> => {\r\n    const SELECT_LAST_ID = 'SELECT last_insert_rowid()';\r\n    let lastId: number = -1;\r\n    try {\r\n      const res = db.exec(SELECT_LAST_ID );\r\n      // process the row here\r\n      lastId = res[0].values[0][0];\r\n      return Promise.resolve(lastId);\r\n    } catch (err) {\r\n      return Promise.reject(new Error(`GetLastId failed: ${err.message}`));\r\n    }\r\n\r\n}\r\nexport const setForeignKeyConstraintsEnabled = async (db: any, toggle: boolean): Promise<void> => {\r\n  let stmt = 'PRAGMA foreign_keys=OFF';\r\n  if (toggle) {\r\n    stmt = 'PRAGMA foreign_keys=ON';\r\n  }\r\n  try {\r\n    db.run(stmt);\r\n    return Promise.resolve();\r\n  } catch (err) {\r\n    const msg = err.message ? err.message : err;\r\n    return Promise.reject(new Error(`SetForeignKey: ${msg}`));\r\n  }\r\n}\r\nexport const getVersion = async (db: any): Promise<number> => {\r\n  let version = 0;\r\n  try {\r\n    const res = db.exec('PRAGMA user_version;');\r\n    version = res[0].values[0][0];\r\n    return Promise.resolve(version);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`GetVersion: ${err.message}`));\r\n  }\r\n}\r\nexport const setVersion = async (db: any, version: number): Promise<void> => {\r\n  try {\r\n    db.exec(`PRAGMA user_version = ${version}`);\r\n    return Promise.resolve();\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`SetVersion: ${err.message}`));\r\n  }\r\n}\r\n\r\nexport const execute = async (db: any, sql: string, fromJson: boolean): Promise<number> => {\r\n  let changes = -1;\r\n  let initChanges = -1;\r\n  try {\r\n    initChanges = await dbChanges(db);\r\n    var sqlStmt = sql;\r\n    // Check for DELETE FROM in sql string\r\n    if(!fromJson && sql.toLowerCase().includes('DELETE FROM'.toLowerCase())) {\r\n      sqlStmt = sql.replace(/\\n/g,'');\r\n      let sqlStmts: string[] = sqlStmt.split(';');\r\n      var resArr: string[] = [];\r\n      for ( const stmt of sqlStmts) {\r\n        const trimStmt = stmt.trim().substring(0,11).toUpperCase();\r\n        if( trimStmt === 'DELETE FROM' && stmt.toLowerCase().includes('WHERE'.toLowerCase())) {\r\n          const whereStmt = stmt.trim();\r\n          const rStmt = await deleteSQL(db, whereStmt, []);\r\n          resArr.push(rStmt);\r\n        } else {\r\n          resArr.push(stmt);\r\n        }\r\n      }\r\n      sqlStmt = resArr.join(';');\r\n    }\r\n    db.exec(sqlStmt);\r\n    changes = (await dbChanges(db)) - initChanges;\r\n    return Promise.resolve(changes);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`Execute: ${err.message}`));\r\n  }\r\n}\r\nexport const executeSet = async (db: any, set: any, fromJson: boolean): Promise<number> =>  {\r\n  let lastId = -1;\r\n  for (let i = 0; i < set.length; i++) {\r\n    const statement = 'statement' in set[i] ? set[i].statement : null;\r\n    const values =\r\n      'values' in set[i] && set[i].values.length > 0 ? set[i].values : [];\r\n    if (statement == null) {\r\n      let msg = 'ExecuteSet: Error No statement';\r\n      msg += ` for index ${i}`;\r\n      return Promise.reject(new Error(msg));\r\n    }\r\n    try {\r\n\r\n      if (Array.isArray(values[0])) {\r\n        for (const val of values) {\r\n          const mVal: any[] = await replaceUndefinedByNull(val);\r\n          await run(db, statement, mVal, fromJson)\r\n        }\r\n      } else {\r\n        const mVal: any[] = await replaceUndefinedByNull(values);\r\n        await run(db, statement, mVal, fromJson)\r\n      }\r\n      lastId = await getLastId(db);\r\n    } catch (err) {\r\n      return Promise.reject(new Error(`ExecuteSet: ${err.message}`));\r\n    }\r\n  }\r\n  return Promise.resolve(lastId);\r\n}\r\nexport const queryAll = async (db: any, sql: string, values: any[]): Promise<any[]> => {\r\n  const result: any[] = [];\r\n  try {\r\n    let retArr: any[] = [];\r\n    if(values != null && values.length > 0) {\r\n      retArr = db.exec(sql, values);\r\n    } else {\r\n      retArr = db.exec(sql);\r\n    }\r\n    if(retArr.length == 0) return Promise.resolve([]);\r\n    for( const valRow of retArr[0].values) {\r\n      const row: any = {};\r\n      for (let i = 0; i < retArr[0].columns.length; i++) {\r\n        row[retArr[0].columns[i]] = valRow[i];\r\n      }\r\n      result.push(row);\r\n    }\r\n    return Promise.resolve(result);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`queryAll: ${err.message}`));\r\n  }\r\n}\r\nexport const run = async (db: any, statement: string, values: any[], fromJson: boolean): Promise<number> => {\r\n  let stmtType: string = statement.replace(/\\n/g,\"\").trim().substring(0,6).toUpperCase();\r\n  let lastId: number = -1;\r\n  let sqlStmt: string = statement\r\n  try {\r\n    if (!fromJson && stmtType === \"DELETE\") {\r\n      sqlStmt = await deleteSQL(db, statement, values);\r\n    }\r\n    if(values != null && values.length > 0) {\r\n      const mVal: any[] = await replaceUndefinedByNull(values);\r\n      db.exec(sqlStmt, mVal);\r\n    } else {\r\n      db.exec(sqlStmt);\r\n    }\r\n    lastId = await getLastId(db);\r\n    return Promise.resolve(lastId);\r\n\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`run: ${err.message}`));\r\n  }\r\n}\r\nexport const deleteSQL= async (db: any, statement: string,\r\n                               values: any[]): Promise<string> => {\r\n  let sqlStmt: string = statement;\r\n  try {\r\n    const isLast: boolean = await isLastModified(db, true);\r\n    const isDel: boolean = await isSqlDeleted(db, true);\r\n    if(isLast && isDel) {\r\n      // Replace DELETE by UPDATE and set sql_deleted to 1\r\n      const wIdx: number = statement.toUpperCase().indexOf(\"WHERE\");\r\n      const preStmt: string = statement.substring(0, wIdx - 1);\r\n      const clauseStmt: string = statement.substring(wIdx, statement.length);\r\n      const tableName: string = preStmt.substring((\"DELETE FROM\").length).trim();\r\n      sqlStmt = `UPDATE ${tableName} SET sql_deleted = 1 ${clauseStmt}`;\r\n      // Find REFERENCES if any and update the sql_deleted column\r\n      await findReferencesAndUpdate(db, tableName, clauseStmt, values);\r\n    }\r\n    return Promise.resolve(sqlStmt);\r\n\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`deleteSQL: ${err.message}`));\r\n  }\r\n}\r\nexport const findReferencesAndUpdate = async (db: any, tableName: string,\r\n                                              whereStmt: string,\r\n                                              values: any[]): Promise<void> => {\r\n  try {\r\n    const references = await getReferences(db, tableName);\r\n    const tableNameWithRefs = references.pop();\r\n    for ( const refe of references) {\r\n      // get the tableName of the reference\r\n      const refTable: string = await getReferencedTableName(refe );\r\n      if (refTable.length <= 0) {\r\n          continue;\r\n      }\r\n      // get the with references columnName\r\n      const withRefsNames: string[] = await getWithRefsColumnName(refe);\r\n      if (withRefsNames.length <= 0) {\r\n          continue;\r\n      }\r\n      // get the referenced columnName\r\n      const colNames: string[] = await getReferencedColumnName(refe);\r\n      if (colNames.length <= 0) {\r\n          continue;\r\n      }\r\n      // update the where clause\r\n      const uWhereStmt: string = await updateWhere(whereStmt, withRefsNames, colNames);\r\n      if (uWhereStmt.length <= 6) {\r\n          continue;\r\n      }\r\n      let updTableName: string = tableNameWithRefs;\r\n      let updColNames: string[] = colNames;\r\n      if (tableNameWithRefs === tableName) {\r\n        updTableName = refTable;\r\n        updColNames = withRefsNames;\r\n      }\r\n      //update sql_deleted for this reference\r\n      const stmt: string = \"UPDATE \" + updTableName + \" SET sql_deleted = 1 \" + uWhereStmt;\r\n      if(values != null && values.length > 0) {\r\n        const mVal: any[] = await replaceUndefinedByNull(values);\r\n        let arrVal: string[] = whereStmt.split('?');\r\n        if (arrVal[arrVal.length-1] === ';') arrVal = arrVal.slice(0,-1);\r\n        let selValues: any[] = [];\r\n        for (const [j,val] of arrVal.entries()) {\r\n          for (let i = 0; i < updColNames.length; i++) {\r\n            const idxVal = val.indexOf(updColNames[i]);\r\n            if(idxVal > -1) {\r\n              selValues.push(mVal[j]);\r\n            }\r\n          }\r\n        }\r\n        db.exec(stmt, selValues);\r\n      } else {\r\n        db.exec(stmt);\r\n      }\r\n      const lastId: number = await getLastId(db);\r\n      if (lastId == -1) {\r\n          const msg = `UPDATE sql_deleted failed for references table: ${refTable}`;\r\n          return Promise.reject(new Error(`findReferencesAndUpdate: ${msg}`));\r\n        }\r\n\r\n    }\r\n    return;\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`findReferencesAndUpdate: ${err.message}`));\r\n  }\r\n}\r\nexport const getReferencedTableName = async (refValue: string): Promise<string> => {\r\n  var tableName: string = '';\r\n\r\n  if (refValue.length > 0) {\r\n    const arr: string[] = refValue.split(new RegExp('REFERENCES','i'));\r\n    if (arr.length === 2) {\r\n      const oPar: number = arr[1].indexOf(\"(\");\r\n      tableName = arr[1].substring(0, oPar).trim();\r\n    }\r\n  }\r\n  return tableName;\r\n}\r\n\r\nexport const  getReferencedColumnName = async (refValue: string): Promise<string[]> => {\r\n  let colNames: string[] = [];\r\n  if (refValue.length > 0) {\r\n    const arr: string[] = refValue.split(new RegExp('REFERENCES','i'));\r\n    if (arr.length === 2) {\r\n      const oPar: number = arr[1].indexOf(\"(\");\r\n      const cPar: number = arr[1].indexOf(\")\");\r\n      const colStr = arr[1].substring(oPar + 1, cPar).trim();\r\n      colNames = colStr.split(',');\r\n    }\r\n  }\r\n  return colNames;\r\n}\r\nexport const  getWithRefsColumnName = async (refValue: string): Promise<string[]> => {\r\n  let colNames: string[] = [];\r\n  if (refValue.length > 0) {\r\n    const arr: string[] = refValue.split(new RegExp('REFERENCES','i'));\r\n    if (arr.length === 2) {\r\n      const oPar: number = arr[0].indexOf(\"(\");\r\n      const cPar: number = arr[0].indexOf(\")\");\r\n      const colStr = arr[0].substring(oPar + 1, cPar).trim();\r\n      colNames = colStr.split(',');\r\n    }\r\n  }\r\n  return colNames;\r\n}\r\n\r\nexport const updateWhere = async (whStmt: string, withRefsNames: string[], colNames: string[]): Promise<string> => {\r\n  var whereStmt = '';\r\n  if (whStmt.length > 0) {\r\n    const index: number = whStmt.toLowerCase().indexOf(\"WHERE\".toLowerCase());\r\n    const stmt: string = whStmt.substring(index + 6);\r\n    if(withRefsNames.length === colNames.length) {\r\n      for(let i = 0; i < withRefsNames.length; i++) {\r\n        let colType: string = 'withRefsNames';\r\n        let idx = stmt.indexOf(withRefsNames[i]);\r\n        if (idx === -1) {\r\n          idx = stmt.indexOf(colNames[i]);\r\n          colType = 'colNames';\r\n        }\r\n        if (idx > -1) {\r\n          let valStr = \"\";\r\n          const fEqual = stmt.indexOf(\"=\",idx);\r\n          if (fEqual > -1) {\r\n            const iAnd = stmt.indexOf(\"AND\",fEqual);\r\n            const ilAnd = stmt.indexOf(\"and\",fEqual);\r\n            if (iAnd > -1) {\r\n              valStr = (stmt.substring(fEqual + 1, iAnd - 1)).trim();\r\n            } else if (ilAnd > -1) {\r\n              valStr = (stmt.substring(fEqual + 1, ilAnd - 1)).trim();\r\n            } else {\r\n              valStr = (stmt.substring(fEqual + 1, stmt.length)).trim();\r\n            }\r\n            if (i > 0) {\r\n             whereStmt += ' AND ';\r\n            }\r\n            if(colType === 'withRefsNames') {\r\n              whereStmt += `${colNames[i]} = ${valStr}`;\r\n            } else {\r\n              whereStmt += `${withRefsNames[i]} = ${valStr}`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      /*\r\n      const fEqual: number = stmt.indexOf(\"=\");\r\n      const whereColName: string = stmt.substring(0, fEqual).trim();\r\n      whereStmt = whStmt.replace(whereColName, colName);\r\n      */\r\n     whereStmt = \"WHERE \" + whereStmt;\r\n    }\r\n  }\r\n  return whereStmt;\r\n}\r\n\r\nexport const getReferences = async (db: any, tableName: string): Promise<any[]> => {\r\n  const sqlStmt: string =\r\n  \"SELECT sql FROM sqlite_master \" +\r\n  \"WHERE sql LIKE('%FOREIGN KEY%') AND sql LIKE('%REFERENCES%') AND \" +\r\n  \"sql LIKE('%\" + tableName + \"%') AND sql LIKE('%ON DELETE%');\";\r\n  try {\r\n    const res: any[] = await queryAll(db,sqlStmt,[]);\r\n    // get the reference's string(s)\r\n    let retRefs: string[] = [];\r\n    if(res.length > 0) {\r\n      retRefs = getRefs(res[0].sql);\r\n    }\r\n    return Promise.resolve(retRefs);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`getReferences: ${err.message}`));\r\n  }\r\n\r\n}\r\nexport const getTableList = async (db:any): Promise<any[]> => {\r\n  try {\r\n    const result = await getTablesNames(db)\r\n    return Promise.resolve(result);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`getTableList: ${err.message}`));\r\n  }\r\n}\r\nexport const isTableExists = async (db: any, tableName: string): Promise<boolean> => {\r\n  try {\r\n    let statement = 'SELECT name FROM sqlite_master WHERE ';\r\n    statement += `type='table' AND name='${tableName}';`;\r\n    const res = await queryAll(db,statement,[]);\r\n    const ret: boolean = res.length > 0 ? true : false;\r\n    return Promise.resolve(ret);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`isTableExists: ${err.message}`));\r\n  }\r\n}\r\n/**\r\n * isLastModified\r\n * @param db\r\n * @param isOpen\r\n */\r\nexport const isLastModified = async (db: any,isOpen: boolean): Promise<boolean> => {\r\n    if (!isOpen) {\r\n      return Promise.reject('isLastModified: database not opened');\r\n    }\r\n    try {\r\n      const tableList: string[] = await getTablesNames(db);\r\n      for( const table of tableList) {\r\n        const tableNamesTypes: any = await getTableColumnNamesTypes(\r\n                                        db, table);\r\n        const tableColumnNames: string[] = tableNamesTypes.names;\r\n        if(tableColumnNames.includes(\"last_modified\")) {\r\n          return Promise.resolve(true);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      return Promise.reject(`isLastModified: ${err}`);\r\n    }\r\n}\r\n/**\r\n * isSqlDeleted\r\n * @param db\r\n * @param isOpen\r\n */\r\n export const isSqlDeleted = async (db: any,isOpen: boolean): Promise<boolean> => {\r\n  if (!isOpen) {\r\n    return Promise.reject('isSqlDeleted: database not opened');\r\n  }\r\n  try {\r\n    const tableList: string[] = await getTablesNames(db);\r\n    for( const table of tableList) {\r\n      const tableNamesTypes: any = await getTableColumnNamesTypes(\r\n                                      db, table);\r\n      const tableColumnNames: string[] = tableNamesTypes.names;\r\n      if(tableColumnNames.includes(\"sql_deleted\")) {\r\n        return Promise.resolve(true);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    return Promise.reject(`isSqlDeleted: ${err}`);\r\n  }\r\n}\r\nexport const replaceUndefinedByNull = async (values: any[]): Promise<any[]> => {\r\n  const retValues: any[] = [];\r\n  for( const val of values) {\r\n    let mVal: any = val;\r\n    if( typeof val === 'undefined') mVal = null;\r\n    retValues.push(mVal);\r\n  }\r\n  return Promise.resolve(retValues);\r\n}\r\nexport const backupTables = async (db: any): Promise<Record<string, string[]>> => {\r\n  const msg = 'BackupTables: ';\r\n  let alterTables: Record<string, string[]> = {};\r\n  try {\r\n    const tables: string[] = await getTablesNames(db);\r\n    for (const table of tables) {\r\n      try {\r\n        const colNames: string[] = await backupTable(db, table);\r\n        alterTables[`${table}`] = colNames;\r\n      } catch (err) {\r\n        return Promise.reject(\r\n          new Error(`${msg}table ${table}: ` + `${err.message}`),\r\n        );\r\n      }\r\n    }\r\n    return Promise.resolve(alterTables);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`BackupTables: ${err.message}`));\r\n  }\r\n}\r\nexport const backupTable = async (db: any, table: string): Promise<string[]> => {\r\n  try {\r\n    // start a transaction\r\n    await beginTransaction(db, true);\r\n    // get the table's column names\r\n    const colNames: string[] = await getTableColumnNames(db, table);\r\n    const tmpTable = `_temp_${table}`;\r\n    // Drop the tmpTable if exists\r\n    const delStmt = `DROP TABLE IF EXISTS ${tmpTable};`;\r\n    await run(db, delStmt, [], false);\r\n  // prefix the table with _temp_\r\n    let stmt = `ALTER TABLE ${table} RENAME `;\r\n    stmt += `TO ${tmpTable};`;\r\n    const lastId: number = await run(db, stmt, [], false);\r\n    if (lastId < 0) {\r\n      let msg = 'BackupTable: lastId < 0';\r\n      try {\r\n        await rollbackTransaction(db, true);\r\n      } catch (err) {\r\n        msg += `: ${err.message}`;\r\n      }\r\n      return Promise.reject(new Error(`${msg}`));\r\n    } else {\r\n      try {\r\n        await commitTransaction(db, true);\r\n        return Promise.resolve(colNames);\r\n      } catch (err) {\r\n        return Promise.reject(new Error('BackupTable: ' + `${err.message}`));\r\n      }\r\n    }\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`BackupTable: ${err.message}`));\r\n  }\r\n}\r\nexport const getTableColumnNames = async (db: any, tableName: string): Promise<string[]> => {\r\n  let resQuery: any[] = [];\r\n  const retNames: string[] = [];\r\n  const query = `PRAGMA table_info('${tableName}');`;\r\n  try {\r\n    resQuery = await queryAll(db, query, []);\r\n    if (resQuery.length > 0) {\r\n      for (const query of resQuery) {\r\n        retNames.push(query.name);\r\n      }\r\n    }\r\n    return Promise.resolve(retNames);\r\n  } catch (err) {\r\n    return Promise.reject(\r\n      new Error('GetTableColumnNames: ' + `${err.message}`),\r\n    );\r\n  }\r\n}\r\nexport const findCommonColumns = async (db: any, alterTables: Record<string, string[]> ): Promise<Record<string, string[]>> => {\r\n  let commonColumns : Record<string, string[]> = {};\r\n  try {\r\n    // Get new table list\r\n    const tables: any[] = await getTablesNames(db);\r\n    if (tables.length === 0) {\r\n      return Promise.reject(\r\n        new Error('FindCommonColumns: get ' + \"table's names failed\"),\r\n      );\r\n    }\r\n    for (const table of tables) {\r\n      // get the column's name\r\n      const tableNames: any = await getTableColumnNames(db, table);\r\n      // find the common columns\r\n      const keys: string[] = Object.keys(alterTables);\r\n      if (keys.includes(table)) {\r\n        commonColumns[table] = arraysIntersection(alterTables[table], tableNames);\r\n      }\r\n    }\r\n    return Promise.resolve(commonColumns);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`FindCommonColumns: ${err.message}`));\r\n  }\r\n}\r\nconst arraysIntersection = (a1: any[], a2: any[]): any[] => {\r\n  if (a1 != null && a2 != null) {\r\n    const first = new Set(a1);\r\n    const second = new Set(a2);\r\n    return [...first].filter(item => second.has(item));\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nconst getRefs = (str: string) => {\r\n  let retRefs: string[] = []\r\n  const arrFor: string[] = str.split(new RegExp('FOREIGN KEY','i'));\r\n  // Loop through Foreign Keys\r\n  for (let i: number = 1; i< arrFor.length; i++) {\r\n    retRefs.push((arrFor[i].split(new RegExp('ON DELETE','i')))[0].trim());\r\n  }\r\n  // find table name with references\r\n  if (str.substring(0, 12).toLowerCase() === 'CREATE TABLE'.toLowerCase()) {\r\n    const oPar = str.indexOf(\"(\");\r\n    const tableName = str.substring(13, oPar).trim();\r\n    retRefs.push(tableName);\r\n  }\r\n\r\n  return retRefs\r\n}\r\nexport const updateNewTablesData = async (db: any, commonColumns: Record<string, string[]> ): Promise<void> => {\r\n  try {\r\n    // start a transaction\r\n    await beginTransaction(db, true);\r\n\r\n    const statements: string[] = [];\r\n    const keys: string[] = Object.keys(commonColumns);\r\n    keys.forEach(key => {\r\n      const columns = commonColumns[key].join(',');\r\n      let stmt = `INSERT INTO ${key} `;\r\n      stmt += `(${columns}) `;\r\n      stmt += `SELECT ${columns} FROM _temp_${key};`;\r\n      statements.push(stmt);\r\n    });\r\n    const changes: number = await execute(db, statements.join('\\n'), false);\r\n    if (changes < 0) {\r\n      let msg: string = 'updateNewTablesData: ' + 'changes < 0';\r\n      try {\r\n        await rollbackTransaction(db, true);\r\n      } catch (err) {\r\n        msg += `: ${err.message}`;\r\n      }\r\n      return Promise.reject(new Error(`${msg}`));\r\n    } else {\r\n      try {\r\n        await commitTransaction(db, true);\r\n        return Promise.resolve();\r\n      } catch (err) {\r\n        return Promise.reject(\r\n          new Error('updateNewTablesData: ' + `${err.message}`),\r\n        );\r\n      }\r\n    }\r\n  } catch (err) {\r\n    return Promise.reject(\r\n      new Error('updateNewTablesData: ' + `${err.message}`),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n"]}