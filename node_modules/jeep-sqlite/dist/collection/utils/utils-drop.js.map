{"version":3,"file":"utils-drop.js","sourceRoot":"","sources":["../../src/utils/utils-drop.ts"],"names":[],"mappings":"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","sourcesContent":["import { queryAll, run, execute } from './utils-sqlite';\r\n\r\nexport const getTablesNames = async (db: any): Promise<string[]> => {\r\n  let sql = 'SELECT name FROM sqlite_master WHERE ';\r\n  sql += \"type='table' AND name NOT LIKE 'sync_table' \";\r\n  sql += \"AND name NOT LIKE '_temp_%' \";\r\n  sql += \"AND name NOT LIKE 'sqlite_%' \";\r\n  sql += \"ORDER BY rootpage DESC;\";\r\n\r\n  const retArr: string[] = [];\r\n  try {\r\n    const retQuery: any[] = await queryAll(db, sql, []);\r\n    for (const query of retQuery) {\r\n      retArr.push(query.name);\r\n    }\r\n    return Promise.resolve(retArr);\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`GetTablesNames: ${err.message}`));\r\n  }\r\n}\r\nexport const getViewsNames = async (mDb: any): Promise<string[]> => {\r\n    let sql = 'SELECT name FROM sqlite_master WHERE ';\r\n    sql += \"type='view' AND name NOT LIKE 'sqlite_%' \";\r\n    sql += 'ORDER BY rootpage DESC;';\r\n    const retArr: string[] = [];\r\n    try {\r\n      const retQuery: any[] = await queryAll(mDb, sql, []);\r\n      for (const query of retQuery) {\r\n        retArr.push(query.name);\r\n      }\r\n      return Promise.resolve(retArr);\r\n    } catch (err) {\r\n      return Promise.reject(new Error(`getViewsNames: ${err.message}`));\r\n    }\r\n}\r\nexport const dropElements = async (db: any, type: string): Promise<void> => {\r\n  let msg = '';\r\n  let stmt1 = `AND name NOT LIKE ('sqlite_%')`;\r\n  switch (type) {\r\n    case 'index':\r\n      msg = 'DropIndexes';\r\n      break;\r\n    case 'trigger':\r\n      msg = 'DropTriggers';\r\n      break;\r\n    case 'table':\r\n      msg = 'DropTables';\r\n      stmt1 += ` AND name NOT IN ('sync_table')`;\r\n      break;\r\n    case 'view':\r\n      msg = 'DropViews';\r\n      break;\r\n    default:\r\n      return Promise.reject(\r\n        new Error(`DropElements: ${type} ` + 'not found'),\r\n      );\r\n  }\r\n  // get the element's names\r\n  let stmt = 'SELECT name FROM sqlite_master WHERE ';\r\n  stmt += `type = '${type}' ${stmt1};`;\r\n  try {\r\n    const elements: any[] = await queryAll(db, stmt, []);\r\n    if (elements.length > 0) {\r\n      const upType: string = type.toUpperCase();\r\n      const statements: string[] = [];\r\n      for (const elem of elements) {\r\n        let stmt = `DROP ${upType} IF EXISTS `;\r\n        stmt += `${elem.name};`;\r\n        statements.push(stmt);\r\n      }\r\n      for (const stmt of statements) {\r\n        const lastId: number = await run(db, stmt, [], false);\r\n        if (lastId < 0) {\r\n          return Promise.reject(new Error(`DropElements: ${msg}: lastId < 0`));\r\n        }\r\n      }\r\n    }\r\n    return Promise.resolve();\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`DropElements: ${msg}: ${err.message}`));\r\n  }\r\n}\r\nexport const dropAll = async (db: any): Promise<void> => {\r\n  try {\r\n    // drop tables\r\n    await dropElements(db, 'table');\r\n    // drop indexes\r\n    await dropElements(db, 'index');\r\n    // drop triggers\r\n    await dropElements(db, 'trigger');\r\n    // drop views\r\n    await dropElements(db, 'view');\r\n    // vacuum the database\r\n    await run(db, 'VACUUM;', [], false);\r\n    return Promise.resolve();\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`DropAll: ${err.message}`));\r\n  }\r\n}\r\nexport const dropTempTables = async (db: any, alterTables: Record<string, string[]>): Promise<void> => {\r\n  const tempTables: string[] = Object.keys(alterTables);\r\n  const statements: string[] = [];\r\n  for (const tTable of tempTables) {\r\n    let stmt = 'DROP TABLE IF EXISTS ';\r\n    stmt += `_temp_${tTable};`;\r\n    statements.push(stmt);\r\n  }\r\n  try {\r\n    const changes: number = await execute(db, statements.join('\\n'), false);\r\n    if (changes < 0) {\r\n      return Promise.reject(new Error('DropTempTables: changes < 0'));\r\n    }\r\n    return Promise.resolve();\r\n  } catch (err) {\r\n    return Promise.reject(new Error(`DropTempTables: ${err.message}`));\r\n  }\r\n}\r\n\r\n"]}